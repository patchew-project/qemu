/*

 Convert &ARCH_CPU(..)->env to use cpu_env(..).

 Rationale: ARCH_CPU() might be slow, being a QOM cast macro.
            cpu_env() is its fast equivalent.

 SPDX-License-Identifier: GPL-2.0-or-later
 SPDX-FileCopyrightText: Linaro Ltd 2024
 SPDX-FileContributor: Philippe Mathieu-Daud√©

 Usage as of v8.2.0:

 $ for targetdir in target/*; do test -d $targetdir || continue; \
       export target=${targetdir:7}; \
       sed \
           -e "s/__CPUArchState__/$( \
               git grep -h --no-line-number '@env: #CPU.*State' \
                   target/$target/cpu.h \
               | sed -n -e 's/.*\(CPU.*State\).\?/\1/p')/g" \
           -e "s/__ARCHCPU__/$( \
               git grep -h --no-line-number OBJECT_DECLARE_CPU_TYPE.*CPU \
                   target/$target/cpu-qom.h \
               | sed -n -e 's/.*(\(.*\), .*, .*)/\1/p')/g" \
           -e "s/__ARCH_CPU__/$( \
               git grep -h --no-line-number OBJECT_DECLARE_CPU_TYPE.*CPU \
                   target/$target/cpu-qom.h \
               | sed -n -e 's/.*(.*, .*, \(.*\))/\1/p')/g" \
       < scripts/coccinelle/cpu_env.cocci_template \
       > $TMPDIR/cpu_env_$target.cocci; \
       for dir in hw target/$target; do \
           spatch --macro-file scripts/cocci-macro-file.h \
                  --sp-file $TMPDIR/cpu_env_$target.cocci \
                  --keep-comments \
                  --dir $dir \
                  --in-place; \
       done; \
   done

*/

/* Argument is CPUState* */
@ CPUState_arg_used @
CPUState *cs;
identifier cpu;
identifier env;
@@
-    __ARCHCPU__ *cpu = __ARCH_CPU__(cs);
-    __CPUArchState__ *env = &cpu->env;
+    __CPUArchState__ *env = cpu_env(cs);
     ... when != cpu

/*
 * Argument is not CPUState* but a related QOM object.
 * CPU() is not a QOM macro but a cast (See commit 0d6d1ab499).
 */
@ depends on never CPUState_arg_used @
identifier obj;
identifier cpu;
identifier env;
@@
-    __ARCHCPU__ *cpu = __ARCH_CPU__(obj);
-    __CPUArchState__ *env = &cpu->env;
+    __CPUArchState__ *env = cpu_env(CPU(obj));
     ... when != cpu

/* Both first_cpu/current_cpu are CPUState* */
@@
symbol first_cpu;
symbol current_cpu;
@@
(
-    CPU(first_cpu)
+    first_cpu
|
-    CPU(current_cpu)
+    current_cpu
)

/* When single use of 'env', call cpu_env() in place */
@@
type CPUArchState;
identifier env;
expression cs;
@@
 {
-    CPUArchState *env = cpu_env(cs);
     ... when != env
-     env
+     cpu_env(cs)
     ... when != env
 }
