// SPDX-License-Identifier: GPL-2.0-or-later
// This file is @generated by tracetool, do not edit.

#[allow(unused_imports)]
use std::ffi::c_char;
#[allow(unused_imports)]
use util::bindings;

#[inline(always)]
fn trace_event_state_is_enabled(dstate: u16) -> bool {
    (unsafe { trace_events_enabled_count }) != 0 && dstate != 0
}

extern "C" {
    static mut trace_events_enabled_count: u32;
}
extern "C" {
    static mut _TRACE_TEST_BLAH_DSTATE: u16;
    static mut _TRACE_TEST_WIBBLE_DSTATE: u16;
}

#[inline(always)]
#[allow(dead_code)]
pub fn trace_test_blah(_context: *mut (), _filename: &std::ffi::CStr)
{
    if trace_event_state_is_enabled(unsafe { _TRACE_TEST_BLAH_DSTATE}) {
        extern "C" { fn _simple_trace_test_blah(_context: *mut (), _filename: *const std::ffi::c_char); }
        unsafe { _simple_trace_test_blah(_context, _filename.as_ptr()); }
    }
}

#[inline(always)]
#[allow(dead_code)]
pub fn trace_test_wibble(_context: *mut (), _value: std::ffi::c_int)
{
    if trace_event_state_is_enabled(unsafe { _TRACE_TEST_WIBBLE_DSTATE}) {
        extern "C" { fn _simple_trace_test_wibble(_context: *mut (), _value: std::ffi::c_int); }
        unsafe { _simple_trace_test_wibble(_context, _value); }
    }
}
