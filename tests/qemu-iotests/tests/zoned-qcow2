#!/usr/bin/env bash
#
# Test zone management operations for qcow2 file.
#

seq="$(basename $0)"
echo "QA output created by $seq"
status=1 # failure is the default!

file_name="zbc.qcow2"
_cleanup()
{
  _cleanup_test_img
  _rm_test_img "$file_name"
}
trap "_cleanup; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ../common.rc
. ../common.filter
. ../common.qemu

# This test only runs on Linux hosts with qcow2 image files.
_supported_fmt qcow2
_supported_proto file
_supported_os Linux

echo
echo "=== Initial image setup ==="
echo

$QEMU_IMG create -f qcow2 $file_name -o size=768M -o zone.size=64M -o \
zone.capacity=64M -o zone.conventional_zones=0 -o zone.max_append_bytes=32M \
-o zone.max_open_zones=6 -o zone.max_active_zones=8 -o zone.mode=host-managed

IMG="--image-opts -n driver=qcow2,file.driver=file,file.filename=$file_name"
QEMU_IO_OPTIONS=$QEMU_IO_OPTIONS_NO_FMT

echo
echo "=== Testing a qcow2 img with zoned format ==="
echo
echo "case 1: test zone operations one by one"

echo "(1) report zones[0]:"
$QEMU_IO $IMG -c "zrp 0 1"
echo
echo "report zones[0~9]:"
$QEMU_IO $IMG -c "zrp 0 10"
echo
echo "report zones[-1]:"  # zones[-1] dictates the last zone
$QEMU_IO $IMG -c "zrp 0x2C000000 2" # 0x2C000000 / 512 = 0x160000
echo
echo
echo "(2) open zones[0], zones[1], zones[-1] then close, finish, reset:"
$QEMU_IO $IMG << EOF
zo 0 0x4000000
zrp 0 1
zo 0x4000000 0x4000000
zrp 0x4000000 1
zo 0x2C000000 0x4000000
zrp 0x2C000000 2
zc 0 0x4000000
zrp 0 1
zc 0x4000000 0x4000000
zrp 0x4000000 1
zc 0x2C000000 0x4000000
zrp 0x2C000000 2
zf 0 0x4000000
zrp 0 1
zf 64M 64M
zrp 0x4000000 2
zf 0x2C000000 0x4000000
zrp 0x2C000000 2
zrs 0 0x4000000
zrp 0 1
zrs 0x4000000 0x4000000
zrp 0x4000000 1
zrs 0x2C000000 0x4000000
zrp 0x2C000000 2
EOF

echo
echo "(3) append write with (4k, 8k) data"
$QEMU_IO $IMG -c "zrp 0 12" # the physical block size of the device is 4096
echo "Append write zones[0], zones[1] twice"
$QEMU_IO $IMG << EOF
zap -p 0 0x1000 0x2000
zrp 0 1
zap -p 0 0x1000 0x2000
zrp 0 1
zap -p 0x4000000 0x1000 0x2000
zrp 0x4000000 1
zap -p 0x4000000 0x1000 0x2000
zrp 0x4000000 1
EOF

echo
echo "Reset all:"
$QEMU_IO $IMG -c "zrp 0 12" -c "zrs 0 768M" -c "zrp 0 12"
echo
echo

echo "case 2: test a sets of ops that works or not"
echo "(1) append write (4k, 4k) and then write to full"
$QEMU_IO $IMG << EOF
zap -p 0 0x1000 0x1000
zrp 0 1
zap -p 0 0x1000 0x1ffd000
zap -p 0 0x1000000 0x1000000
zrp 0 1
EOF

echo "Reset zones[0]:"
$QEMU_IO $IMG -c "zrs 0 64M" -c "zrp 0 1"

echo "(2) write in zones[0], zones[3], zones[8], and then reset all"
$QEMU_IO $IMG << EOF
zap -p 0 0x1000 0x1000
zap -p 0xc000000 0x1000 0x1000
zap -p 0x20000000 0x1000 0x1000
zrp 0 12
zrs 0 768M
zrp 0 12
EOF

echo "case 3: test zone resource management"
echo "(1) write in zones[0], zones[1], zones[2] and then close it"
$QEMU_IO $IMG << EOF
zap -p 0 0x1000 0x1000
zap -p 0x4000000 0x1000 0x1000
zap -p 0x8000000 0x1000 0x1000
zrp 0 12
zc 0 64M
zc 0x4000000 64M
zc 0x8000000 64M
zrp 0 12
EOF

echo "(2) reset all after 3(1)"
$QEMU_IO $IMG << EOF
zrs 0 768M
zrp 0 12
EOF

# success, all done
echo "*** done"
rm -f $seq.full
status=0
