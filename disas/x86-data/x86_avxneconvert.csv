"Instruction","Opcode","Valid 64-bit","Valid 32-bit","Valid 16-bit","Feature Flags","Operand 1","Operand 2","Operand 3","Operand 4","Tuple Type","Description"
"VBCSTNEBF162PS xmm,m16","VEX.128.f3.0F38.W0 b1 /r","Valid","Valid","Invalid","AVXNECONVERT","ModRM:reg (w)","ModRM:r/m (r)","","","","Load one BF16 floating-point element from m16, convert to FP32 and store result in xmm1."
"VBCSTNEBF162PS ymm,m16","VEX.256.f3.0F38.W0 b1 /r","Valid","Valid","Invalid","AVXNECONVERT","ModRM:reg (w)","ModRM:r/m (r)","","","","Load one BF16 floating-point element from m16, convert to FP32 and store result in ymm1."
"VBCSTNESH2PS xmm,m16","VEX.128.66.0F38.W0 b1 /r","Valid","Valid","Invalid","AVXNECONVERT","ModRM:reg (w)","ModRM:r/m (r)","","","","Load one FP16 element from m16, convert to FP32, and store result in xmm1."
"VBCSTNESH2PS ymm,m16","VEX.256.66.0F38.W0 b1 /r","Valid","Valid","Invalid","AVXNECONVERT","ModRM:reg (w)","ModRM:r/m (r)","","","","Load one FP16 element from m16, convert to FP32, and store result in ymm1."
"VCVTNEEBF162PS xmm,m128","VEX.128.f3.0F38.W0 b0 /r","Valid","Valid","Invalid","AVXNECONVERT","ModRM:reg (w)","ModRM:r/m (r)","","","","Convert even elements of packed BF16 values from m128 to FP32 values and store in xmm1."
"VCVTNEEBF162PS ymm,m256","VEX.256.f3.0F38.W0 b0 /r","Valid","Valid","Invalid","AVXNECONVERT","ModRM:reg (w)","ModRM:r/m (r)","","","","Convert even elements of packed BF16 values from m256 to FP32 values and store in ymm1."
"VCVTNEEPH2PS xmm,m128","VEX.128.66.0F38.W0 b0 /r","Valid","Valid","Invalid","AVXNECONVERT","ModRM:reg (w)","ModRM:r/m (r)","","","","Convert even elements of packed FP16 values from m128 to FP32 values and store in xmm1."
"VCVTNEEPH2PS ymm,m256","VEX.256.66.0F38.W0 b0 /r","Valid","Valid","Invalid","AVXNECONVERT","ModRM:reg (w)","ModRM:r/m (r)","","","","Convert even elements of packed FP16 values from m256 to FP32 values and store in ymm1."
"VCVTNEOBF162PS xmm,m128","VEX.128.f2.0F38.W0 b0 /r","Valid","Valid","Invalid","AVXNECONVERT","ModRM:reg (w)","ModRM:r/m (r)","","","","Convert odd elements of packed BF16 values from m128 to FP32 values and store in xmm1."
"VCVTNEOBF162PS ymm,m256","VEX.256.f2.0F38.W0 b0 /r","Valid","Valid","Invalid","AVXNECONVERT","ModRM:reg (w)","ModRM:r/m (r)","","","","Convert odd elements of packed BF16 values from m256 to FP32 values and store in ymm1."
"VCVTNEOPH2PS xmm,m128","VEX.128.0F38.W0 b0 /r","Valid","Valid","Invalid","AVXNECONVERT","ModRM:reg (w)","ModRM:r/m (r)","","","","Convert odd elements of packed FP16 values from m128 to FP32 values and store in xmm1."
"VCVTNEOPH2PS ymm,m256","VEX.256.0F38.W0 b0 /r","Valid","Valid","Invalid","AVXNECONVERT","ModRM:reg (w)","ModRM:r/m (r)","","","","Convert odd elements of packed FP16 values from m256 to FP32 values and store in ymm1."
"VCVTNEPS2BF16 xmm,xmm/m128","VEX.128.f3.0F38.W0 72 /r","Valid","Valid","Invalid","AVXNECONVERT","ModRM:reg (w)","ModRM:r/m (r)","","","","Convert packed single-precision floating-point values from xmm2/m128 to packed BF16 values and store in xmm1."
"VCVTNEPS2BF16 xmm,ymm/m256","VEX.256.f3.0F38.W0 72 /r","Valid","Valid","Invalid","AVXNECONVERT","ModRM:reg (w)","ModRM:r/m (r)","","","","Convert packed single-precision floating-point values from ymm2/m256 to packed BF16 values and store in xmm1."
