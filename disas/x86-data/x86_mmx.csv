"Instruction","Opcode","Valid 64-bit","Valid 32-bit","Valid 16-bit","Feature Flags","Operand 1","Operand 2","Operand 3","Operand 4","Tuple Type","Description"
"MOVD mm, rw/mw","LEX.0F.W0 6E /r","Valid","Valid","Invalid","MMX","ModRM:reg (w)","ModRM:r/m (r)","","","","Move doubleword from r/m to mm."
"MOVD rw/mw, mm","LEX.0F.W0 7E /r","Valid","Valid","Invalid","MMX","ModRM:r/m (w)","ModRM:reg (r)","","","","Move doubleword from mm to r/m."
"MOVQ mm, rw/mw","LEX.0F.W1 6E /r","Valid","Invalid","Invalid","MMX","ModRM:reg (w)","ModRM:r/m (r)","","","","Move quadword from r/m to mm."
"MOVQ mm, mm/m64","LEX.0F.W0 6F /r","Valid","Valid","Invalid","MMX","ModRM:reg (w)","ModRM:r/m (r)","","","","Move quadword from mm/m64 to mm."
"MOVQ rw/mw, mm","LEX.0F.W1 7E /r","Valid","Invalid","Invalid","MMX","ModRM:r/m (w)","ModRM:reg (r)","","","","Move quadword from mm to r/m."
"MOVQ mm/m64, mm","LEX.0F.W0 7F /r","Valid","Valid","Invalid","MMX","ModRM:r/m (w)","ModRM:reg (r)","","","","Move quadword from mm to mm/m64."
"PACKSSDW mm1, mm2/m64","LEX.0F.W0 6B /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Converts 2 packed signed doubleword integers from mm1 and from mm2/m64 into 4 packed signed word integers in mm1 using signed saturation."
"PACKSSWB mm1, mm2/m64","LEX.0F.W0 63 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Converts 4 packed signed word integers from mm1 and from mm2/m64 into 8 packed signed byte integers in mm1 using signed saturation."
"PACKUSWB mm, mm/m64","LEX.0F.W0 67 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Converts 4 signed word integers from mm and 4 signed word integers from mm/m64 into 8 unsigned byte integers in mm using unsigned saturation."
"PADDB mm, mm/m64","LEX.0F.W0 FC /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Add packed byte integers from mm/m64 and mm."
"PADDD mm, mm/m64","LEX.0F.W0 FE /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Add packed doubleword integers from mm/m64 and mm."
"PADDQ mm, mm/m64","LEX.0F.W0 D4 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Add packed quadword integers from mm/m64 and mm."
"PADDSB mm, mm/m64","LEX.0F.W0 EC /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Add packed signed byte integers from mm/m64 and mm and saturate the results."
"PADDSW mm, mm/m64","LEX.0F.W0 ED /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Add packed signed word integers from mm/m64 and mm and saturate the results."
"PADDUSB mm, mm/m64","LEX.0F.W0 DC /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Add packed unsigned byte integers from mm/m64 and mm and saturate the results."
"PADDUSW mm, mm/m64","LEX.0F.W0 DD /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Add packed unsigned word integers from mm/m64 and mm and saturate the results."
"PADDW mm, mm/m64","LEX.0F.W0 FD /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Add packed word integers from mm/m64 and mm."
"PAND mm, mm/m64","LEX.0F.W0 DB /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Bitwise AND mm/m64 and mm."
"PANDN mm, mm/m64","LEX.0F.W0 DF /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Bitwise AND NOT of mm/m64 and mm."
"PCMPEQB mm, mm/m64","LEX.0F.W0 74 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Compare packed bytes in mm/m64 and mm for equality."
"PCMPEQD mm, mm/m64","LEX.0F.W0 76 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Compare packed doublewords in mm/m64 and mm for equality."
"PCMPEQW mm, mm/m64","LEX.0F.W0 75 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Compare packed words in mm/m64 and mm for equality."
"PCMPGTB mm, mm/m64","LEX.0F.W0 64 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Compare packed signed byte integers in mm and mm/m64 for greater than."
"PCMPGTD mm, mm/m64","LEX.0F.W0 66 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Compare packed signed doubleword integers in mm and mm/m64 for greater than."
"PCMPGTW mm, mm/m64","LEX.0F.W0 65 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Compare packed signed word integers in mm and mm/m64 for greater than."
"PMADDWD mm, mm/m64","LEX.0F.W0 F5 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Multiply the packed words in mm by the packed words in mm/m64, add adjacent doubleword results, and store in mm."
"PMULHW mm, mm/m64","LEX.0F.W0 E5 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Multiply the packed signed word integers in mm1 register and mm2/m64, and store the high 16 bits of the results in mm1."
"PMULLW mm, mm/m64","LEX.0F.W0 D5 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Multiply the packed signed word integers in mm1 register and mm2/m64, and store the low 16 bits of the results in mm1."
"POR mm, mm/m64","LEX.0F.W0 EB /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Bitwise OR of mm/m64 and mm."
"PSLLD mm, ib","LEX.0F.W0 72 /6 ib","Valid","Valid","Invalid","MMX","ModRM:r/m (r, w)","ib","","","","Shift doublewords in mm left by ib while shifting in 0s."
"PSLLD mm, mm/m64","LEX.0F.W0 F2 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Shift doublewords in mm left by mm/m64 while shifting in 0s."
"PSLLQ mm, ib","LEX.0F.W0 73 /6 ib","Valid","Valid","Invalid","MMX","ModRM:r/m (r, w)","ib","","","","Shift quadword in mm left by ib while shifting in 0s."
"PSLLQ mm, mm/m64","LEX.0F.W0 F3 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Shift quadword in mm left by mm/m64 while shifting in 0s."
"PSLLW mm1, ib","LEX.0F.W0 71 /6 ib","Valid","Valid","Invalid","MMX","ModRM:r/m (r, w)","ib","","","","Shift words in mm left by ib while shifting in 0s."
"PSLLW mm, mm/m64","LEX.0F.W0 F1 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Shift words in mm left mm/m64 while shifting in 0s."
"PSRAD mm, ib","LEX.0F.W0 72 /4 ib","Valid","Valid","Invalid","MMX","ModRM:r/m (r, w)","ib","","","","Shift doublewords in mm right by ib while shifting in sign bits."
"PSRAD mm, mm/m64","LEX.0F.W0 E2 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Shift doublewords in mm right by mm/m64 while shifting in sign bits."
"PSRAW mm, ib","LEX.0F.W0 71 /4 ib","Valid","Valid","Invalid","MMX","ModRM:r/m (r, w)","ib","","","","Shift words in mm right by ib while shifting in sign bits"
"PSRAW mm, mm/m64","LEX.0F.W0 E1 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Shift words in mm right by mm/m64 while shifting in sign bits."
"PSRLD mm, ib","LEX.0F.W0 72 /2 ib","Valid","Valid","Invalid","MMX","ModRM:r/m (r, w)","ib","","","","Shift doublewords in mm right by ib while shifting in 0s."
"PSRLD mm, mm/m64","LEX.0F.W0 D2 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Shift doublewords in mm right by amount specified in mm/m64 while shifting in 0s."
"PSRLQ mm, ib","LEX.0F.W0 73 /2 ib","Valid","Valid","Invalid","MMX","ModRM:r/m (r, w)","ib","","","","Shift mm right by ib while shifting in 0s."
"PSRLQ mm, mm/m64","LEX.0F.W0 D3 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Shift mm right by amount specified in mm/m64 while shifting in 0s."
"PSRLW mm, ib","LEX.0F.W0 71 /2 ib","Valid","Valid","Invalid","MMX","ModRM:r/m (r, w)","ib","","","","Shift words in mm right by ib while shifting in 0s."
"PSRLW mm, mm/m64","LEX.0F.W0 D1 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Shift words in mm right by amount specified in mm/m64 while shifting in 0s."
"PSUBB mm, mm/m64","LEX.0F.W0 F8 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Subtract packed byte integers in mm/m64 from packed byte integers in mm."
"PSUBD mm, mm/m64","LEX.0F.W0 FA /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Subtract packed doubleword integers in mm/m64 from packed doubleword integers in mm."
"PSUBSB mm, mm/m64","LEX.0F.W0 E8 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Subtract signed packed bytes in mm/m64 from signed packed bytes in mm and saturate results."
"PSUBSW mm, mm/m64","LEX.0F.W0 E9 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Subtract signed packed words in mm/m64 from signed packed words in mm and saturate results."
"PSUBUSB mm, mm/m64","LEX.0F.W0 D8 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Subtract unsigned packed bytes in mm/m64 from unsigned packed bytes in mm and saturate result."
"PSUBUSW mm, mm/m64","LEX.0F.W0 D9 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Subtract unsigned packed words in mm/m64 from unsigned packed words in mm and saturate result."
"PSUBW mm, mm/m64","LEX.0F.W0 F9 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Subtract packed word integers in mm/m64 from packed word integers in mm."
"PUNPCKHBW mm, mm/m64","LEX.0F.W0 68 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Unpack and interleave high-order bytes from mm and mm/m64 into mm."
"PUNPCKHDQ mm, mm/m64","LEX.0F.W0 6A /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Unpack and interleave high-order doublewords from mm and mm/m64 into mm."
"PUNPCKHWD mm, mm/m64","LEX.0F.W0 69 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Unpack and interleave high-order words from mm and mm/m64 into mm."
"PUNPCKLBW mm, mm/m32","LEX.0F.W0 60 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Interleave low-order bytes from mm and mm/m32 into mm."
"PUNPCKLDQ mm, mm/m32","LEX.0F.W0 62 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Interleave low-order doublewords from mm and mm/m32 into mm."
"PUNPCKLWD mm, mm/m32","LEX.0F.W0 61 /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Interleave low-order words from mm and mm/m32 into mm."
"PXOR mm, mm/m64","LEX.0F.W0 EF /r","Valid","Valid","Invalid","MMX","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Bitwise XOR of mm/m64 and mm."
