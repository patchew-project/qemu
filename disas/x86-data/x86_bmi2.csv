"Instruction","Opcode","Valid 64-bit","Valid 32-bit","Valid 16-bit","Feature Flags","Operand 1","Operand 2","Operand 3","Operand 4","Tuple Type","Description"
"BZHI rw, rw/mw, rw","VEX.LZ.0F38.W0 F5 /r","Valid","Valid","Invalid","BMI2","ModRM:reg (w)","ModRM:r/m (r)","VEX.vvvv (r)","","","Zero bits in r/m starting with the position in r, write result to r."
"BZHI rw, rw/mw, rw","VEX.LZ.0F38.W1 F5 /r","Valid","Invalid","Invalid","BMI2","ModRM:reg (w)","ModRM:r/m (r)","VEX.vvvv (r)","","","Zero bits in r/m starting with the position in r, write result to r."
"MULX rw, rw, rw/mw","VEX.LZ.F2.0F38.W0 F6 /r","Valid","Valid","Invalid","BMI2","ModRM:reg (w)","VEX.vvvv (w)","ModRM:r/m (r)","RDX (r)","","Unsigned multiply of r/m with EDX without affecting arithmetic flags."
"MULX rw, rw, rw/mw","VEX.LZ.F2.0F38.W1 F6 /r","Valid","Invalid","Invalid","BMI2","ModRM:reg (w)","VEX.vvvv (w)","ModRM:r/m (r)","RDX (r)","","Unsigned multiply of r/m with RDX without affecting arithmetic flags."
"PDEP rw, rw, rw/mw","VEX.LZ.F2.0F38.W0 F5 /r","Valid","Valid","Invalid","BMI2","ModRM:reg (w)","VEX.vvvv (r)","ModRM:r/m (r)","","","Parallel deposit of bits from r using mask in r/m, result is writ-ten to r."
"PDEP rw, rw, rw/mw","VEX.LZ.F2.0F38.W1 F5 /r","Valid","Invalid","Invalid","BMI2","ModRM:reg (w)","VEX.vvvv (r)","ModRM:r/m (r)","","","Parallel deposit of bits from r using mask in r/m, result is writ-ten to r."
"PEXT rw, rw, rw/mw","VEX.LZ.F3.0F38.W0 F5 /r","Valid","Valid","Invalid","BMI2","ModRM:reg (w)","VEX.vvvv (r)","ModRM:r/m (r)","","","Parallel extract of bits from r using mask in r/m, result is writ-ten to r."
"PEXT rw, rw, rw/mw","VEX.LZ.F3.0F38.W1 F5 /r","Valid","Invalid","Invalid","BMI2","ModRM:reg (w)","VEX.vvvv (r)","ModRM:r/m (r)","","","Parallel extract of bits from r using mask in r/m, result is writ-ten to r."
"RORX rw, rw/mw, ib","VEX.LZ.F2.0F3A.W0 F0 /r ib","Valid","Valid","Invalid","BMI2","ModRM:reg (w)","ModRM:r/m (r)","ib","","","Rotate 32-bit r/m right ib times without affecting arithmetic flags."
"RORX rw, rw/mw, ib","VEX.LZ.F2.0F3A.W1 F0 /r ib","Valid","Invalid","Invalid","BMI2","ModRM:reg (w)","ModRM:r/m (r)","ib","","","Rotate 64-bit r/m right ib times without affecting arithmetic flags."
"SARX rw, rw/mw, rw","VEX.LZ.F3.0F38.W0 F7 /r","Valid","Valid","Invalid","BMI2","ModRM:reg (w)","ModRM:r/m (r)","VEX.vvvv (r)","","","Shift r/m arithmetically right with count specified in the third operand."
"SARX rw, rw/mw, rw","VEX.LZ.F3.0F38.W1 F7 /r","Valid","Invalid","Invalid","BMI2","ModRM:reg (w)","ModRM:r/m (r)","VEX.vvvv (r)","","","Shift r/m arithmetically right with count specified in the third operand."
"SHLX rw, rw/mw, rw","VEX.LZ.66.0F38.W0 F7 /r","Valid","Valid","Invalid","BMI2","ModRM:reg (w)","ModRM:r/m (r)","VEX.vvvv (r)","","","Shift r/m logically left with count specified in the third operand."
"SHLX rw, rw/mw, rw","VEX.LZ.66.0F38.W1 F7 /r","Valid","Invalid","Invalid","BMI2","ModRM:reg (w)","ModRM:r/m (r)","VEX.vvvv (r)","","","Shift r/m logically left with count specified in the third operand."
"SHRX rw, rw/mw, rw","VEX.LZ.F2.0F38.W0 F7 /r","Valid","Valid","Invalid","BMI2","ModRM:reg (w)","ModRM:r/m (r)","VEX.vvvv (r)","","","Shift r/m logically right with count specified in the third operand."
"SHRX rw, rw/mw, rw","VEX.LZ.F2.0F38.W1 F7 /r","Valid","Invalid","Invalid","BMI2","ModRM:reg (w)","ModRM:r/m (r)","VEX.vvvv (r)","","","Shift r/m logically right with count specified in the third operand."
