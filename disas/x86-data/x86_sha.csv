"Instruction","Opcode","Valid 64-bit","Valid 32-bit","Valid 16-bit","Feature Flags","Operand 1","Operand 2","Operand 3","Operand 4","Tuple Type","Description"
"SHA1MSG1 xmm1, xmm2/m128","LEX.0F38.W0 C9 /r","Valid","Valid","Invalid","SHA","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Performs an intermediate calculation for the next four SHA1 message dwords using previous message dwords from xmm1 and xmm2/m128, storing the result in xmm1."
"SHA1MSG2 xmm1, xmm2/m128","LEX.0F38.W0 CA /r","Valid","Valid","Invalid","SHA","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Performs the final calculation for the next four SHA1 message dwords using intermediate results from xmm1 and the previous message dwords from xmm2/m128, storing the result in xmm1."
"SHA1NEXTE xmm1, xmm2/m128","LEX.0F38.W0 C8 /r","Valid","Valid","Invalid","SHA","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Calculates SHA1 state variable E after four rounds of operation from the current SHA1 state variable A in xmm1. The calculated value of the SHA1 state variable E is added to the scheduled dwords in xmm2/m128, and stored with some of the scheduled dwords in xmm1."
"SHA1RNDS4 xmm1, xmm2/m128, ib","LEX.0F3A.W0 CC /r ib","Valid","Valid","Invalid","SHA","ModRM:reg (r, w)","ModRM:r/m (r)","ib","","","Performs four rounds of SHA1 operation operating on SHA1 state (A,B,C,D) from xmm1, with a pre-computed sum of the next 4 round message dwords and state variable E from xmm2/m128. The immediate byte controls logic functions and round constants."
"SHA256MSG1 xmm1, xmm2/m128","LEX.0F38.W0 CC /r","Valid","Valid","Invalid","SHA","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Performs an intermediate calculation for the next four SHA256 message dwords using previous message dwords from xmm1 and xmm2/m128, storing the result in xmm1."
"SHA256MSG2 xmm1, xmm2/m128","LEX.0F38.W0 CD /r","Valid","Valid","Invalid","SHA","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Performs the final calculation for the next four SHA256 message dwords using previous message dwords from xmm1 and xmm2/m128, storing the result in xmm1."
"SHA256RNDS2 xmm1, xmm2/m128, <XMM0>","LEX.0F38.W0 CB /r","Valid","Valid","Invalid","SHA","ModRM:reg (r, w)","ModRM:r/m (r)","Implicit XMM0 (r)","","","Perform 2 rounds of SHA256 operation using an initial SHA256 state (C,D,G,H) from xmm1, an initial SHA256 state (A,B,E,F) from xmm2/m128, and a pre-computed sum of the next 2 round mes-sage dwords and the corresponding round constants from the implicit operand XMM0, storing the updated SHA256 state (A,B,E,F) result in xmm1."
