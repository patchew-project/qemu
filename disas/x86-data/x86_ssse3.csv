"Instruction","Opcode","Valid 64-bit","Valid 32-bit","Valid 16-bit","Feature Flags","Operand 1","Operand 2","Operand 3","Operand 4","Tuple Type","Description"
"PABSB mm1, mm2/m64","LEX.0F38.W0 1C /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (w)","ModRM:r/m (r)","","","","Compute the absolute value of bytes in mm2/m64 and store UNSIGNED result in mm1."
"PABSB xmm1, xmm2/m128","LEX.66.0F38.W0 1C /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (w)","ModRM:r/m (r)","","","","Compute the absolute value of bytes in xmm2/m128 and store UNSIGNED result in xmm1."
"PABSD mm1, mm2/m64","LEX.0F38.W0 1E /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (w)","ModRM:r/m (r)","","","","Compute the absolute value of 32-bit integers in mm2/m64 and store UNSIGNED result in mm1."
"PABSD xmm1, xmm2/m128","LEX.66.0F38.W0 1E /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (w)","ModRM:r/m (r)","","","","Compute the absolute value of 32-bit integers in xmm2/m128 and store UNSIGNED result in xmm1."
"PABSW mm1, mm2/m64","LEX.0F38.W0 1D /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (w)","ModRM:r/m (r)","","","","Compute the absolute value of 16-bit integers in mm2/m64 and store UNSIGNED result in mm1."
"PABSW xmm1, xmm2/m128","LEX.66.0F38.W0 1D /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (w)","ModRM:r/m (r)","","","","Compute the absolute value of 16-bit integers in xmm2/m128 and store UNSIGNED result in xmm1."
"PALIGNR mm1, mm2/m64, ib","LEX.0F3A.W0 0F /r ib","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","ib","","","Concatenate destination and source operands, extract byte-aligned result shifted to the right by constant value in ib into mm1."
"PALIGNR xmm1, xmm2/m128, ib","LEX.66.0F3A.W0 0F /r ib","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","ib","","","Concatenate destination and source operands, extract byte-aligned result shifted to the right by constant value in ib into xmm1."
"PHADDD mm1, mm2/m64","LEX.0F38.W0 02 /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Add 32-bit integers horizontally, pack to mm1."
"PHADDD xmm1, xmm2/m128","LEX.66.0F38.W0 02 /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Add 32-bit integers horizontally, pack to xmm1."
"PHADDSW mm1, mm2/m64","LEX.0F38.W0 03 /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Add 16-bit signed integers horizontally, pack saturated integers to mm1."
"PHADDSW xmm1, xmm2/m128","LEX.66.0F38.W0 03 /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Add 16-bit signed integers horizontally, pack saturated integers to xmm1."
"PHADDW mm1, mm2/m64","LEX.0F38.W0 01 /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Add 16-bit integers horizontally, pack to mm1."
"PHADDW xmm1, xmm2/m128","LEX.66.0F38.W0 01 /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Add 16-bit integers horizontally, pack to xmm1."
"PHSUBD mm1, mm2/m64","LEX.0F38.W0 06 /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Subtract 32-bit signed integers horizontally, pack to mm1."
"PHSUBD xmm1, xmm2/m128","LEX.66.0F38.W0 06 /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Subtract 32-bit signed integers horizontally, pack to xmm1."
"PHSUBSW mm1, mm2/m64","LEX.0F38.W0 07 /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Subtract 16-bit signed integer horizontally, pack saturated integers to mm1."
"PHSUBSW xmm1, xmm2/m128","LEX.66.0F38.W0 07 /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Subtract 16-bit signed integer horizontally, pack saturated integers to xmm1."
"PHSUBW mm1, mm2/m64","LEX.0F38.W0 05 /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Subtract 16-bit signed integers horizontally, pack to mm1."
"PHSUBW xmm1, xmm2/m128","LEX.66.0F38.W0 05 /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Subtract 16-bit signed integers horizontally, pack to xmm1."
"PMADDUBSW mm1, mm2/m64","LEX.0F38.W0 04 /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to mm1."
"PMADDUBSW xmm1, xmm2/m128","LEX.66.0F38.W0 04 /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Multiply signed and unsigned bytes, add horizontal pair of signed words, pack saturated signed-words to xmm1."
"PMULHRSW mm1, mm2/m64","LEX.0F38.W0 0B /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to mm1."
"PMULHRSW xmm1, xmm2/m128","LEX.66.0F38.W0 0B /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Multiply 16-bit signed words, scale and round signed doublewords, pack high 16 bits to xmm1."
"PSHUFB mm1, mm2/m64","LEX.0F38.W0 00 /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Shuffle bytes in mm1 according to contents of mm2/m64."
"PSHUFB xmm1, xmm2/m128","LEX.66.0F38.W0 00 /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Shuffle bytes in xmm1 according to contents of xmm2/m128."
"PSIGNB mm1, mm2/m64","LEX.0F38.W0 08 /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Negate/zero/preserve packed byte integers in mm1 depending on the corresponding sign in mm2/m64."
"PSIGNB xmm1, xmm2/m128","LEX.66.0F38.W0 08 /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Negate/zero/preserve packed byte integers in xmm1 depending on the corresponding sign in xmm2/m128."
"PSIGND mm1, mm2/m64","LEX.0F38.W0 0A /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Negate/zero/preserve packed doubleword integers in mm1 depending on the corresponding sign in mm2/m128."
"PSIGND xmm1, xmm2/m128","LEX.66.0F38.W0 0A /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Negate/zero/preserve packed doubleword integers in xmm1 depending on the corresponding sign in xmm2/m128."
"PSIGNW mm1, mm2/m64","LEX.0F38.W0 09 /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Negate/zero/preserve packed word integers in mm1 depending on the corresponding sign in mm2/m128."
"PSIGNW xmm1, xmm2/m128","LEX.66.0F38.W0 09 /r","Valid","Valid","Invalid","SSSE3","ModRM:reg (r, w)","ModRM:r/m (r)","","","","Negate/zero/preserve packed word integers in xmm1 depending on the corresponding sign in xmm2/m128."
