# -*- Mode: Python -*-
# vim: filetype=python

##
# = Multi-Core Debug (MCD) API
##


##
# == Definition of Structures
##


##
# @MCDAPIVersion:
#
# Structure type containing the MCD API version information of the tool.
#
# @v-api-major: API major version.
# @v-api-minor: API minor version.
# @author:      API name of the author of this MCD API version.
#
# Since: 9.1
##
{ 'struct': 'MCDAPIVersion',
  'data': {
    'v-api-major': 'uint16',
    'v-api-minor': 'uint16',
    'author':      'str' } }


##
# @MCDImplVersionInfo:
#
# Structure type containing the MCD API implementation information.
#
# @v-api:       Implemented API version.
# @v-imp-major: Major version number of this implementation.
# @v-imp-minor: Minor version number of this implementation.
# @v-imp-build: Build number of this implementation.
# @vendor:      Name of vendor of the implementation.
# @date:        String from __DATE__ macro at compile time.
#
# Since: 9.1
##
{ 'struct': 'MCDImplVersionInfo',
  'data': {
    'v-api'      : 'MCDAPIVersion',
    'v-imp-major': 'uint16',
    'v-imp-minor': 'uint16',
    'v-imp-build': 'uint16',
    'vendor'     : 'str',
    'date'       : 'str' } }


##
# @MCDErrorInfo:
#
# Structure type containing the error status and error event notification.
#
# @return-status: Return status from the last API call.
# @error-code:    Detailed error code from the last API call.
# @error-events:  Detailed event code from the last API call.
# @error-str:     Detailed error text string from the last API call.
#
# Since: 9.1
##
{ 'struct': 'MCDErrorInfo',
  'data': {
    'return-status': 'uint32',
    'error-code'   : 'uint32',
    'error-events' : 'uint32',
    'error-str'    : 'str' }}


##
# @MCDServerInfo:
#
# Structure type containing the server information.
#
# @server:          String containing the server name.
# @system-instance: String containing the unique system instance identifier.
# @acc-hw:          String containing the unique device access hardware name.
#
# Since: 9.1
##
{ 'struct': 'MCDServerInfo',
  'data': {
    'server'         : 'str',
    'system-instance': 'str',
    'acc-hw'         : 'str' } }


##
# @MCDCoreConInfo:
#
# Structure type containing the core connection information.
#
# @host:            String containing the IP host name.
# @server-port:     Port number of the server.
# @server-key:      String containing the server key as provided by
#                   mcd_open_server_f().
# @system-key:      String containing the system key as provided by
#                   mcd_open_server_f().
# @device-key:      String containing the device key, optional for
#                   mcd_open_core_f().
# @system:          String containing the system name. Predefined value is
#                   "Real HW" for physical devices. Note that in case of "Real
#                   HW" the @acc-hw always needs to be defined.
# @system-instance: String containing the unique system instance identifier.
#                   Allows to differentiate between several system instances
#                   with the same name. A typical use case is a simulator where
#                   different instances can be distinguished by their process
#                   ID. (For example @system-instance could be: "Process ID:
#                   1234")
# @acc-hw:          String containing the unique device access hardware name.
# @device-type:     Device type identifier (IEEE 1149.1 device ID)
# @device:          String containing the system unique device instance name.
#                   For Real HW this is usually the sales name of the device.
#                   If the access hardware operates a multi device target
#                   system (e.g. over IEEE1149.7), this device string can
#                   contain an index to differentiate between several devices
#                   of the same type.
# @device-id:       Unique device ID.
# @core:            String containing the device unique core name.
# @core-type:       Core type identifier (taken from ELF predefined
#                   architecture)
# @core-id:         Unique core ID representing the core version.
#
# Since: 9.1
##
{ 'struct': 'MCDCoreConInfo',
  'data': {
    'host'           : 'str',
    'server-port'    : 'uint32',
    'server-key'     : 'str',
    'system-key'     : 'str',
    'device-key'     : 'str',
    'system'         : 'str',
    'system-instance': 'str',
    'acc-hw'         : 'str',
    'device-type'    : 'uint32',
    'device'         : 'str',
    'device-id'      : 'uint32',
    'core'           : 'str',
    'core-type'      : 'uint32',
    'core-id'        : 'uint32' } }


##
# @MCDMemspace:
#
# Structure type containing information about a memory space.
#
# @mem-space-id:             ID of this memory space, ID 0 is reserved.
# @mem-space-name:           Unique name of the memory space.
# @mem-type:                 Type of the memory space.
# @bits-per-mau:             Bits per minimum addressable unit (MAU). The
#                            minimum addressable unit of a memory is defined as
#                            the size in bits of its basic block that may have
#                            a unique address. For example for a byte
#                            addressable memory this value would be set to '8'
#                            according to the 8 bits of a byte block.
# @invariance:               The total number of bytes in a memory word, which
#                            is @bits-per-mau divided by 8, consists of groups
#                            of "invariant" bytes. These groups can be arranged
#                            in Big Endian or Little Endian order.
#                            For example an @invariance of '2' and '64'
#                            @bits-per-mau, a Little Endian word are
#                            represented as b0 b1 b2 b3 b4 b5 b6 b7.
#                            In contrast to this, a Big Endian word is
#                            represented as b6 b7 b4 b5 b2 b3 b0 b1.
# @endian:                   Endianness of this memory space. Can be overriden
#                            by @endian of a MCDMemblock.
# @min-addr:                 Minimum address of this memory space.
# @max-addr:                 Maximum address of this memory space.
# @num-mem-blocks:           Number of memory blocks in this memory space. Each
#                            memory space may have a certain number of memory
#                            blocks. Memory blocks contain additional
#                            information pertaining to the intended purpose of
#                            the memory. This information may be used as a hint
#                            for memory data representation within a tool's
#                            memory view. This field specifies the number of
#                            memory blocks present in this memory space.
# @supported-access-options: Supported memory access options (OR'ed bitmask).
#                            Can be overriden by @supported-access-options of a
#                            MCDMemblock.
# @core-mode-mask-read:      Mask of core modes for which read accesses are
#                            impossible. A set bit indicates that read accesses
#                            are denied in this mode. Bit 0 represents core
#                            mode '1', bit 31 represents core mode '32'. Can be
#                            overriden by @core-mode-mask-read of a MCDMemblock.
# @core-mode-mask-write:     Mask of core modes for which write accesses are
#                            impossible; a set bit indicates that write
#                            accesses are denied in this mode. Bit 0 represents
#                            core mode '1', bit 31 represents core mode '32'.
#                            Can be overriden by
#                            @core-mode-mask-write of a MCDMemblock.
#
# Since: 9.1
##
{ 'struct': 'MCDMemspace',
  'data': {
    'mem-space-id'            : 'uint32',
    'mem-space-name'          : 'str',
    'mem-type'                : 'uint32',
    'bits-per-mau'            : 'uint32',
    'invariance'              : 'uint8',
    'endian'                  : 'uint32',
    'min-addr'                : 'uint64',
    'max-addr'                : 'uint64',
    'num-mem-blocks'          : 'uint32',
    'supported-access-options': 'uint32',
    'core-mode-mask-read'     : 'uint32',
    'core-mode-mask-write'    : 'uint32' } }


##
# @MCDRegisterGroup:
#
# Structure type containing register group information.
#
# @reg-group-id:   Contains the ID of this register group. A register group ID
#                  must be unique within the scope of a target core. ID '0' is
#                  reserved.
# @reg-group-name: The name of a register group. A register group name cannot
#                  be longer than MCD_REG_NAME_LEN characters (use
#                  representative names).
# @n-registers:    Number of registers part of this group.
#
# Since: 9.1
##
{ 'struct': 'MCDRegisterGroup',
  'data': {
    'reg-group-id'  : 'uint32',
    'reg-group-name': 'str',
    'n-registers'   : 'uint32' } }


##
# @MCDAddr:
#
# Structure type containing a completely resolved logical or physical memory
# address.
#
# @address:         Address value within a memory space, expressed in bytes.
# @mem-space-id:    ID of the memory space associated with this address, e.g. a
#                   program memory, a data memory or registers .
# @addr-space-id:   ID of the address space in which this address is valid.
# @addr-space-type: Type of the address space in which this address is valid.
#
# Since: 9.1
##
{ 'struct': 'MCDAddr',
  'data': {
    'address'        : 'uint64',
    'mem-space-id'   : 'uint32',
    'addr-space-id'  : 'uint32',
    'addr-space-type': 'uint32' } }


##
# @MCDRegisterInfo:
#
# Structure type containing register information for a single register.
#
# @addr:                   Either the address of a memory mapped register or
#                          the register address in a dedicated
#                          "register memory space"
# @reg-group-id:           ID of the group this register belongs to.
# @regname:                The name of a register. A register name cannot be
#                          longer than MCD_REG_NAME_LEN characters (use
#                          representative names).
# @regsize:                Register size in bits.
# @core-mode-mask-read:    Mask of core modes for which read accesses are
#                          impossible. A set bit indicates that read accesses
#                          are denied in this mode. Bit 0 represents core mode
#                          '1', bit 31 represents core mode 32. Overrides
#                          @core-mode-mask-read of the corresponding
#                          mcd_memspace_st.
# @core-mode-mask-write:   Mask of core modes for which write accesses are
#                          impossible. A set bit indicates that write accesses
#                          are denied in this mode. Bit 0 represents core mode
#                          '1', bit 31 represents core mode '32'. Overrides
#                          @core-mode-mask-write of the corresponding
#                          mcd_memspace_st.
# @side-effects-read:      Reading this register can trigger side effects.
# @side-effects-write:     Writing this register can trigger side effects.
# @reg-type:               Register type (simple, compound or partial)
# @hw-thread-id:           Hardware thread ID this register belongs to. The ID
#                          must be set to '0' if the register is not assigned
#                          to a hardware thread.
#
# Since: 9.1
##
{ 'struct': 'MCDRegisterInfo',
  'data': {
    'addr'                : 'MCDAddr',
    'reg-group-id'        : 'uint32',
    'regname'             : 'str',
    'regsize'             : 'uint32',
    'core-mode-mask-read' : 'uint32',
    'core-mode-mask-write': 'uint32',
    'side-effects-read'   : 'bool',
    'side-effects-write'  : 'bool',
    'reg-type'            : 'uint32',
    'hw-thread-id'        : 'uint32' } }


##
# @MCDTrigInfo:
#
# Structure type containing information about trigger capabilities.
#
# @type:           Supported trigger types (OR'ed bitmask).
# @option:         Supported trigger options (OR'ed bitmask).
# @action:         Supported trigger actions (OR'ed bitmask).
# @trig-number:    Number of usable triggers (or 0 if number not known).
# @state-number:   Number of states of the trigger set's state machine (or 0 if
#                  not known).
# @counter-number: Number of usable counters (or 0 if not known)
# @sw-breakpoints: True if software breakpoints via code patch are available.
#
# Since: 9.1
##
{ 'struct': 'MCDTrigInfo',
  'data': {
      'type'          : 'uint32',
      'option'        : 'uint32',
      'action'        : 'uint32',
      'trig-number'   : 'uint32',
      'state-number'  : 'uint32',
      'counter-number': 'uint32',
      'sw-breakpoints': 'bool' } }


##
# @MCDCtrigInfo:
#
# Structure type containing information about a custom trigger.
#
# @ctrig-id: Custom trigger ID, ID 0 is reserved.
# @info-str: Description of the custom trigger.
#
# Since: 9.1
##
{ 'struct': 'MCDCtrigInfo',
  'data': {
    'ctrig-id': 'uint32',
    'info-str': 'str' } }


##
# @MCDTrigSimpleCore:
#
# Structure type containing information about a simple core trigger condition.
#
# @type:           Trigger type, for this structure type it must be one of:
#                  - %MCD_TRIG_TYPE_IP
#                  - %MCD_TRIG_TYPE_READ
#                  - %MCD_TRIG_TYPE_WRITE
#                  - %MCD_TRIG_TYPE_RW
#                  - %MCD_TRIG_TYPE_NOCYCLE
# @option:         Adds further qualifiers to the trigger or overrides the
#                  behaviour (multiple options possible)
# @action:         Action to be taken on trigger. Only one per trigger allowed.
# @action-param:   Parameter for action - depends on the selected action.
# @modified:       Set to "TRUE" on return of @mcd-create-trig if trigger
#                  was modified by implementation, untouched otherwise.
# @state-mask:     Set bits indicate that this trigger is inactive when
#                  reaching the corresponding state of the state machine. Bit 0
#                  represents state '1' of the state machine. Only to be
#                  considered if %MCD_TRIG_OPT_STATE_IS_CONDITION is set in
#                  @option.
# @addr-start:     Start address for the address range the trigger shall be
#                  activated for.
# @addr-range:     Size of the address range for the trigger (in bytes). If it
#                  is set to '0', the trigger is activated by an access to a
#                  single address. If it is set to '1', the range of addresses
#                  is two (@addr_start + 1). The address range can be
#                  "inverted" if %MCD_TRIG_OPT_OUT_OF_RANGE is set in @option.
#
# Since: 9.1
##
{ 'struct': 'MCDTrigSimpleCore',
  'data': {
  'type'        : 'uint32',
  'option'      : 'uint32',
  'action'      : 'uint32',
  'action-param': 'uint32',
  'modified'    : 'bool',
  'state-mask'  : 'uint32',
  'addr-start'  : 'MCDAddr',
  'addr-range'  : 'uint64' }}


##
# @MCDTrigComplexCore:
#
# Structure type containing information about a complex core trigger condition.
#
# @type:           Trigger type, for this structure type it must be one of:
#                  - %MCD_TRIG_TYPE_IP
#                  - %MCD_TRIG_TYPE_READ
#                  - %MCD_TRIG_TYPE_WRITE
#                  - %MCD_TRIG_TYPE_RW
#                  - %MCD_TRIG_TYPE_NOCYCLE
# @option:         Adds further qualifiers to the trigger or overrides the
#                  behaviour (multiple options possible)
# @action:         Action to be taken on trigger. Only one per trigger allowed.
# @action-param:   Parameter for action - depends on the selected action.
# @modified:       Set to "TRUE" on return of @mcd-create-trig if trigger
#                  was modified by implementation, untouched otherwise.
# @state-mask:     Set bits indicate that this trigger is inactive when
#                  reaching the corresponding state of the state machine. Bit 0
#                  represents state '1' of the state machine. Only to be
#                  considered if %MCD_TRIG_OPT_STATE_IS_CONDITION is set in
#                  @option.
# @addr-start:     Start address for the address range the trigger shall be
#                  activated for.
# @addr-range:     Size of the address range for the trigger (in bytes). If it
#                  is set to '0', the trigger is activated by an access to a
#                  single address. If it is set to '1', the range of addresses
#                  is two (@addr_start + 1). The address range can be
#                  "inverted" if %MCD_TRIG_OPT_OUT_OF_RANGE is set in @option.
# @data-start:     Data comparison value of the trigger. Only considered if
#                  %MCD_TRIG_OPT_DATA_IS_CONDITION is set in @option. Setting
#                  option %MCD_TRIG_OPT_NOT_DATA activates the trigger on a
#                  data mismatch.
# @data-range:     Size of the data value range for the trigger. If it is set
#                  to '0', the trigger is activated on a match with a single
#                  value. If it is set to '1', the range of values is two
#                  (@data_range + 1). Option %MCD_TRIG_OPT_SIGNED_DATA may be
#                  set in @option if the data shall be interpreted as signed.
#                  This usually also requires the option
#                  %MCD_TRIG_OPT_DATASIZE_IS_CONDITION to be set in @option.
# @data-mask:      Only value bits are considered for which the mask is set to
#                  '0'
# @data-size:      Size of the access in bytes. If set to '0' the size shall
#                  not be considered. Shall be only considered if
#                  %MCD_TRIG_OPT_DATASIZE_IS_CONDITION is set in @option.
# @hw-thread-id:   ID of the hardware thread this trigger is associated with.
# @sw-thread-id:   ID of the software thread this trigger is associated with.
# @core-mode-mask: Mask of core modes for which the trigger shall not be
#                  activated. A set bit disables the trigger for the
#                  corresponding mode. Bit 0 represents core mode '1', bit 31
#                  represents core mode '32'.
#
# Since: 9.1
##
{ 'struct': 'MCDTrigComplexCore',
  'data': {
    'type'          : 'uint32',
    'option'        : 'uint32',
    'action'        : 'uint32',
    'action-param'  : 'uint32',
    'modified'      : 'bool',
    'state-mask'    : 'uint32',
    'addr-start'    : 'MCDAddr',
    'addr-range'    : 'uint64',
    'data-start'    : 'uint64',
    'data-range'    : 'uint64',
    'data-mask'     : 'uint64',
    'data-size'     : 'uint32',
    'hw-thread-id'  : 'uint32',
    'sw-thread-id'  : 'uint64',
    'core-mode-mask': 'uint32' }}


##
# @MCDTrig:
#
# Compound structure which can be set to every supported trigger type.
# Only one member is supposed to be set at once.
#
# @trig-simple-core:  Simple core trigger condition.
# @trig-complex-core: Complex core trigger condition.
#
# Since: 9.1
##
{ 'struct': 'MCDTrig',
  'data': {
    '*trig-simple-core':  'MCDTrigSimpleCore',
    '*trig-complex-core': 'MCDTrigComplexCore' } }


##
# @MCDTrigState:
#
# Structure type containing a trigger state.
#
# @active:         Was active at the point of time the trigger set was
#                  uploaded.
# @captured:       Activated at least once after trigger got downloaded to the
#                  target.
# @captured-valid: The information in @captured is valid.
# @count-value:    Current value of the counter (for counter triggers).
# @count-valid:    The information in @count-value is valid.
#
# Since: 9.1
##
{ 'struct': 'MCDTrigState',
  'data': {
     'active'        : 'bool',
     'captured'      : 'bool',
     'captured-valid': 'bool',
     'count-value'   : 'uint64',
     'count-valid'   : 'bool' } }


##
# @MCDTrigSetState:
#
# Structure type containing a trigger state.
#
# @active: Set if the trigger set is currently active.
# @state: Current state of the trigger set's state machine.
# @state-valid: Current state is valid.
# @trig-bus: Current state of trigger bus.
# @trig-bus-valid: Current state of trig-bus is valid.
# @trace: Current state of trace start/stop.
# @trace-valid: Current state is valid.
# @analysis: Current state of performance analysis start/stop.
# @analysis-valid: Current state is valid.
#
# Since: 9.1
##
{ 'struct': 'MCDTrigSetState',
  'data': {
    'active'        : 'bool',
    'state'         : 'uint32',
    'state-valid'   : 'bool',
    'trig-bus'      : 'uint32',
    'trig-bus-valid': 'bool',
    'trace'         : 'bool',
    'trace-valid'   : 'bool',
    'analysis'      : 'bool',
    'analysis-valid': 'bool' } }


##
# @MCDTx:
#
# Structure type containing information about a single transaction.
#
# @addr:         The address of the first memory cell/register.
# @access-type:  Type of access: Read/Write/Read+Write/Write+Verify.
# @options:      Access options: burst, side-effects, alternate path, cache,
#                etc.
# @access-width: Access size in bytes (or 0 if access size does not matter).
# @core-mode:    The core mode in which the access should be performed (or 0
#                for most permissive mode).
# @data:         Byte array of size @num-bytes storing the access data.
# @num-bytes:    Size of the memory/register access. The buffer @data needs to
#                be of this size.
# @num-bytes-ok: Number of successfully received/sent bytes.
#
# Since: 9.1
##
{ 'struct': 'MCDTx',
  'data': {
    'addr'        : 'MCDAddr',
    'access-type' : 'uint32',
    'options'     : 'uint32',
    'access-width': 'uint8',
    'core-mode'   : 'uint8',
    'data'        : ['uint8'],
    'num-bytes'   : 'uint32',
    'num-bytes-ok': 'uint32' } }


##
# @MCDTxlist:
#
# Structure type containing a transaction list.
#
# @tx:        Array of size @num-tx storing the transactions.
# @num-tx:    Number of transactions.
# @num-tx-ok: Number of transactions which succeeded without any errors.
#
# Since: 9.1
##
{ 'struct': 'MCDTxlist',
  'data': {
    'tx'       : ['MCDTx'],
    'num-tx'   : 'uint32',
    'num-tx-ok': 'uint32' } }


##
# @MCDCoreState:
#
# Structure type containing the state of a core.
#
# @state:        Core state.
# @event:        Core events (OR'ed bitmask)
# @hw-thread-id: ID of the hardware thread that caused the core to stop.
# @trig-id:      ID of the trigger that caused the core to stop.
# @stop-str:     Detailed description of a special stop reason.
# @info-str:     Detailed description of the core state.
#
# Since: 9.1
##
{ 'struct': 'MCDCoreState',
  'data': {
    'state'       : 'uint32',
    'event'       : 'uint32',
    'hw-thread-id': 'uint32',
    'trig-id'     : 'uint32',
    'stop-str'    : 'str',
    'info-str'    : 'str' } }


##
# @MCDRstInfo:
#
# Structure type containing information about a particular reset class.
#
# @class-vector: Reset class vector which issues this reset. Exactly one bit
#                may be set.
# @info-str:     Description of the reset class.
#
# Since: 9.1
##
{ 'struct': 'MCDRstInfo',
  'data': {
    'class-vector': 'uint32',
    'info-str'    : 'str' } }


##
# == Target Initialization API
##


##
# @MCDInitializeResult:
#
# Return value of @mcd-initialize.
#
# @return-status: Return code.
#
# @impl-info: Information about the QEMU build, its version and the version of
#             the implemented MCD API.
#
# Since: 9.1
##
{ 'struct': 'MCDInitializeResult',
  'data': {
    'return-status': 'uint32',
    '*impl-info'   : 'MCDImplVersionInfo' } }


##
# @mcd-initialize:
#
# Function initializing the interaction between a tool-side implementation and
# target-side implementation.
#
# @version-req: MCD API version as requested by an upper layer.
#
# Returns: @MCDInitializeResult
#
# Since: 9.1
#
# .. qmp-example::
#    :title: Check compatibility with MCD server
#
#     -> { "execute": "mcd-initialize",
#          "arguments": { "version-req": { "v-api-major": 1,
#                                          "v-api-minor": 1,
#                                          "author": "" } } }
#     <- {
#            "return": {
#                "impl-info": {
#                    "v-api": {
#                        "v-api-minor": 1,
#                        "v-api-major": 1,
#                        "author": "QEMU Release"
#                    },
#                    "vendor": "QEMU",
#                    "v-imp-minor": 2,
#                    "v-imp-major": 9,
#                    "v-imp-build": 0,
#                    "date": "Dec 18 2024"
#                },
#                "return-status": 0
#            }
#        }
##
{ 'command': 'mcd-initialize',
  'data': { 'version-req': 'MCDAPIVersion' },
  'returns': 'MCDInitializeResult' }


##
# @mcd-exit:
#
# Function cleaning up all core and server connections from a tool.
#
# Since: 9.1
##
{ 'command': 'mcd-exit' }


##
# == Server Connection API
##


##
# @MCDQryServersResult:
#
# Return value of @mcd-qry-servers.
#
# @return-status: Return code.
# @num-servers:   The number of returned servers. In case the input value of
#                 @num-servers is '0', this is the number of all available
#                 servers.
# @server-info:   Server information.
#
# Since: 9.1
##
{ 'struct': 'MCDQryServersResult',
  'data': {
    'return-status': 'uint32',
    '*num-servers' : 'uint32',
    '*server-info' : [ 'MCDServerInfo' ] }}


##
# @mcd-qry-servers:
#
# Function returning a list of available servers.
#
# @host:        String containing the host name.
# @running:     Selects between running and installed servers.
# @start-index: Start index of the queried servers. This refers to an
#               internal list of the target side implementation.
# @num-servers: The number of queried servers starting from the defined
#               @start-index. If it is set to '0', no server descriptions are
#               returned but the number of all available servers.
#
# Returns: @MCDQryServersResult
#
# Since: 9.1
#
# .. qmp-example::
#
#     -> { "execute": "mcd-qry-servers",
#        "arguments": { "host": "",
#                       "running": true,
#                       "start-index": 0,
#                       "num-servers": 0 } }
#    <- {
#           "return": {
#               "num-servers": 1,
#               "return-status": 0
#           }
#       }
#
#    -> { "execute": "mcd-qry-servers",
#         "arguments": { "host": "",
#                        "running": true,
#                        "start-index": 0,
#                        "num-servers": 1 } }
#    <- {
#           "return": {
#               "num-servers": 1,
#               "server-info": [
#                   {
#                       "system-instance": "Process ID: 44801",
#                       "acc-hw": "",
#                       "server": "QEMU"
#                   }
#               ],
#               "return-status": 0
#           }
#       }
##
{ 'command': 'mcd-qry-servers',
  'data': {
    'host'       : 'str',
    'running'    : 'bool',
    'start-index': 'uint32',
    'num-servers': 'uint32' },
  'returns': 'MCDQryServersResult' }


##
# @MCDOpenServerResult:
#
# Return value of @mcd-open-server.
#
# @return-status: Return code.
# @server-uid:    Unique identifier of the server instance.
# @host:          String containing the host name.
# @config-string: Server configuration information.
#
# Since: 9.1
##
{ 'struct': 'MCDOpenServerResult',
  'data': {
    'return-status' : 'uint32',
    '*server-uid'   : 'uint32',
    '*host'         : 'str',
    '*config-string': 'str' } }


##
# @mcd-open-server:
#
# Function opening the connection to a server on a host computer.
#
# @system-key:    A server is claimed by this key when being opened.
# @config-string: Allows the configuration of the server connection by a
#                 character string. Delimiters are blanks, tabs and line
#                 breaks. Value strings are always enclosed with "double
#                 quotes". Bool values can be "TRUE" or "FALSE" (both in
#                 small letters).
#
# Returns: @MCDOpenServerResult
#
# Since: 9.1
#
# .. qmp-example::
#
#    -> { "execute": "mcd-open-server",
#         "arguments": { "system-key": "",
#                        "config-string": "" } }
#    <- {
#           "return": {
#               "config-string": "",
#               "host": "QEMU",
#               "server-uid": 1,
#               "return-status": 0
#           }
#       }
#    -> { "execute": "mcd-open-server",
#         "arguments": { "system-key": "",
#                        "config-string": "" } }
#    <- {
#           "return": {
#               "return-status": 3
#           }
#       }
#    -> { "execute": "mcd-qry-error-info" }
#    <- {
#           "return": {
#               "error-str": "server already open",
#               "error-code": 512,
#               "error-events": 0,
#               "return-status": 3
#           }
#       }
##
{ 'command': 'mcd-open-server',
  'data': {
    'system-key'   : 'str',
    'config-string': 'str' },
  'returns': 'MCDOpenServerResult' }


##
# @MCDCloseServerResult:
#
# Return value of @mcd-close-server.
#
# @return-status: Return code.
#
# Since: 9.1
##
{ 'struct': 'MCDCloseServerResult', 'data': { 'return-status': 'uint32' } }


##
# @mcd-close-server:
#
# Function closing the connection to a debug server on a host computer.
#
# @server-uid: Unique identifier of the open server as returned by
#              @mcd-open-server.
#
# Returns: @MCDCloseServerResult.
#
# Since: 9.1
##
{ 'command': 'mcd-close-server',
  'data': { 'server-uid': 'uint32' },
  'returns': 'MCDCloseServerResult' }


##
# == Target System Features API
##


##
# @MCDQrySystemsResult:
#
# Return value of @mcd-qry-systems.
#
# @return-status:   Return code.
# @num-systems:     The number of systems the core connection info was returned
#                   for. In case the input value of @num-systems is '0', this is
#                   the number of all available systems.
# @system-con-info: Core connection information of the requested systems.
#
# Since: 9.1
##
{ 'struct': 'MCDQrySystemsResult',
  'data': {
    'return-status'   : 'uint32',
    '*num-systems'    : 'uint32',
    '*system-con-info': [ 'MCDCoreConInfo' ] }}


##
# @mcd-qry-systems:
#
# Function querying the core connection information of a specified number of
# systems.
#
# @start-index: Start index of the queried systems. This refers to an
#               internal list of the target side implementation.
# @num-systems: The number of queried systems starting from the defined
#               @start-index. If it is set to '0', no core connection
#               information is returned but the number of available systems.
#
# Returns: @MCDQrySystemsResult
#
# Since: 9.1
#
# .. qmp-example::
#
#     -> { "execute": "mcd-qry-systems",
#          "arguments": { "start-index": 0,
#                         "num-systems": 1 } }
#     <- {
#            "return": {
#                "num-systems": 1,
#                "system-con-info": [
#                    {
#                        "core-id": 0,
#                        "device": "",
#                        "device-id": 0,
#                        "device-key": "",
#                        "system": "qemu-system-aarch64",
#                        "core": "",
#                        "host": "",
#                        "system-key": "",
#                        "system-instance": "Process ID: 21591",
#                        "acc-hw": "",
#                        "core-type": 0,
#                        "device-type": 0,
#                        "server-key": "",
#                        "server-port": 0
#                    }
#                ],
#                "return-status": 0
#            }
#        }
##
{ 'command': 'mcd-qry-systems',
  'data': {
    'start-index': 'uint32',
    'num-systems': 'uint32' },
  'returns': 'MCDQrySystemsResult' }


##
# @MCDQryDevicesResult:
#
# Return value of @mcd-qry-devices.
#
# @return-status:   Return code.
# @num-devices:     The number of devices the core connection information was
#                   returned for. In case the input value of @num-devices is
#                   '0', this is the number of all available devices for the
#                   selected system.
# @device-con-info: Core connection information of the requested devices.
#
# Since: 9.1
##
{ 'struct': 'MCDQryDevicesResult',
  'data': {
    'return-status'   : 'uint32',
    '*num-devices'    : 'uint32',
    '*device-con-info': [ 'MCDCoreConInfo' ] }}


##
# @mcd-qry-devices:
#
# Function querying the core connection information of a specified number of
# devices of a system.
#
# @system-con-info: Core connection information of the system the devices
#                   are queried from.
# @start-index:     Start index of the requested devices. This refers to
#                   an internal list of the target side implementation.
# @num-devices:     The number of queried devices (e.g. simulated on or
#                   connected to this host computer) starting from the defined
#                   @start-index. If it is set to '0', no core connection
#                   information is returned but the number of all available
#                   devices.
#
# Returns: @MCDQryDevicesResult
#
# Since: 9.1
#
# .. qmp-example::
#
#     -> { "execute": "mcd-qry-devices",
#          "arguments": {
#              "start-index": 0,
#               "num-devices": 1,
#               "system-con-info": {
#                   "core-id": 0,
#                   "device": "",
#                   "device-id": 0,
#                   "device-key": "",
#                   "system": "qemu-system-aarch64",
#                   "core": "",
#                   "host": "",
#                   "system-key": "",
#                   "system-instance": "",
#                   "acc-hw": "",
#                   "core-type": 0,
#                   "device-type": 0,
#                   "server-key": "",
#                   "server-port": 0 } } }
#     <- {
#            "return": {
#                "return-status": 0,
#                "num-devices": 1,
#                "device-con-info": [
#                    {
#                        "core-id": 0,
#                        "device": "virt-10.0",
#                        "device-id": 0,
#                        "device-key": "",
#                        "system": "qemu-system-aarch64",
#                        "core": "",
#                        "host": "",
#                        "system-key": "",
#                        "system-instance": "",
#                        "acc-hw": "",
#                        "core-type": 0,
#                        "device-type": 0,
#                        "server-key": "",
#                        "server-port": 0
#                    }
#                ]
#            }
#        }
##
{ 'command': 'mcd-qry-devices',
  'data': {
    'system-con-info': 'MCDCoreConInfo',
    'start-index'    : 'uint32',
    'num-devices'    : 'uint32' },
  'returns': 'MCDQryDevicesResult' }


##
# @MCDQryCoresResult:
#
# Return value of @mcd-qry-cores.
#
# @return-status: Return code.
#
# @num-cores:     The number of cores the core connection information
#                 is returned for. In case the input value of @num-cores is '0',
#                 this is the number of all available cores for the selected
#                 system or device.
# @core-con-info: Core connection information of the requested cores.
#
# Since: 9.1
##
{ 'struct': 'MCDQryCoresResult',
  'data': {
  'return-status' : 'uint32',
  '*num-cores'    : 'uint32',
  '*core-con-info': [ 'MCDCoreConInfo' ] }}


##
# @mcd-qry-cores:
#
# Function querying the core connection information of a specified number of
# cores of a system/device.
#
# @connection-info: Core connection information of the system or device
#                   the cores are queried from.
# @start-index:     Start index of the requested cores. This refers to an
#                   internal list of the target side implementation.
# @num-cores:       The number of queried cores starting from the defined
#                   @start-index. If it is set to '0', no core connection
#                   information is returned but the number of all available
#                   cores.
#
# Returns: @MCDQryCoresResult
#
# Since: 9.1
#
# .. qmp-example::
#    :title: Multicore
#
#     -> { "execute": "mcd-qry-cores",
#          "arguments": {
#              "start-index": 0,
#               "num-cores": 3,
#               "connection-info": {
#                   "core-id": 0,
#                   "device": "virt-10.0",
#                   "device-id": 0,
#                   "device-key": "",
#                   "system": "",
#                   "core": "",
#                   "host": "",
#                   "system-key": "qemu-system-aarch64",
#                   "system-instance": "",
#                   "acc-hw": "",
#                   "core-type": 0,
#                   "device-type": 0,
#                   "server-key": "",
#                   "server-port": 0 } } }
#     <- {
#            "return": {
#                "num-cores": 3,
#                "core-con-info": [
#                    {
#                        "core-id": 0,
#                        "device": "virt-10.0",
#                        "device-id": 0,
#                        "device-key": "",
#                        "system": "",
#                        "core": "cortex-a53-arm-cpu",
#                        "host": "",
#                        "system-key": "qemu-system-aarch64",
#                        "system-instance": "",
#                        "acc-hw": "",
#                        "core-type": 0,
#                        "device-type": 0,
#                        "server-key": "",
#                        "server-port": 0
#                    },
#                    {
#                        "core-id": 1,
#                        "device": "virt-10.0",
#                        "device-id": 0,
#                        "device-key": "",
#                        "system": "",
#                        "core": "cortex-a53-arm-cpu",
#                        "host": "",
#                        "system-key": "qemu-system-aarch64",
#                        "system-instance": "",
#                        "acc-hw": "",
#                        "core-type": 0,
#                        "device-type": 0,
#                        "server-key": "",
#                        "server-port": 0
#                    },
#                    {
#                        "core-id": 2,
#                        "device": "virt-10.0",
#                        "device-id": 0,
#                        "device-key": "",
#                        "system": "",
#                        "core": "cortex-a53-arm-cpu",
#                        "host": "",
#                        "system-key": "qemu-system-aarch64",
#                        "system-instance": "",
#                        "acc-hw": "",
#                        "core-type": 0,
#                        "device-type": 0,
#                        "server-key": "",
#                        "server-port": 0
#                    }
#                ],
#                "return-status": 0
#            }
#        }
##
{ 'command': 'mcd-qry-cores',
  'data': {
    'connection-info': 'MCDCoreConInfo',
    'start-index'    : 'uint32',
    'num-cores'      : 'uint32' },
  'returns': 'MCDQryCoresResult' }

##
# == Core Connection API
##

##
# @MCDOpenCoreResult:
#
# Return value of @mcd-open-core.
#
# @return-status: Return code.
# @core-uid:      Unique identifier of the core instance.
# @core-con-info: Core connection information of the core instance.
#
# Since: 9.1
##
{ 'struct': 'MCDOpenCoreResult',
  'data': {
    'return-status' : 'uint32',
    '*core-uid'     : 'uint32',
    '*core-con-info': 'MCDCoreConInfo' }}


##
# @mcd-open-core:
#
# Function opening a core connection.
#
# @core-con-info: Unambiguous core information (e.g. from @mcd-qry-cores).
#
# Returns: @MCDOpenCoreResult
#
# Since: 9.1
#
# .. qmp-example::
#
#     -> { "execute": "mcd-open-core",
#          "arguments": {
#              "core-con-info": {
#                  "core-id": 0,
#                  "device": "virt-10.0",
#                  "device-id": 0,
#                  "device-key": "",
#                  "system": "",
#                  "core": "cortex-a53-arm-cpu",
#                  "host": "",
#                  "system-key": "qemu-system-aarch64",
#                  "system-instance": "",
#                  "acc-hw": "",
#                  "core-type": 0,
#                  "device-type": 0,
#                  "server-key": "",
#                  "server-port": 0 } } }
#     <- {
#          "return": {
#              "core-con-info": {
#                  "core-id": 0,
#                  "device": "virt-10.0",
#                  "device-id": 0,
#                  "device-key": "",
#                  "system": "",
#                  "core": "cortex-a53-arm-cpu",
#                  "host": "",
#                  "system-key": "qemu-system-aarch64",
#                  "system-instance": "",
#                  "acc-hw": "",
#                  "core-type": 0,
#                  "device-type": 0,
#                  "server-key": "",
#                  "server-port": 0
#              },
#              "return-status": 0,
#              "core-uid": 1
#          }
#        }
##
{ 'command': 'mcd-open-core',
  'data': { 'core-con-info': 'MCDCoreConInfo' },
  'returns': 'MCDOpenCoreResult' }


##
# @MCDCloseCoreResult:
#
# Return value of @mcd-close-core.
#
# @return-status: Return code.
#
# Since: 9.1
##
{ 'struct': 'MCDCloseCoreResult', 'data': { 'return-status': 'uint32' } }


##
# @mcd-close-core:
#
# Function closing a core connection.
#
# @core-uid: Unique identifier of the open core as returned by @mcd-open-core.
#
# Returns: @MCDCloseCoreResult
#
# Since: 9.1
#
# .. qmp-example::
#
#     -> { "execute": "mcd-close-core", "arguments": { "core-uid": 1 } }
#     <- {
#            "return": {
#                "return-status": 0
#            }
#        }
#     -> { "execute": "mcd-close-core", "arguments": { "core-uid": 1 } }
#     <- {
#            "return": {
#                "return-status": 3
#            }
#        }
#     -> { "execute": "mcd-qry-error-info", "arguments": { "core-uid": 1 } }
#     <- {
#            "return": {
#                "error-str": "core not open",
#                "error-code": 512,
#                "error-events": 0,
#                "return-status": 3
#            }
#        }
##
{ 'command': 'mcd-close-core',
  'data': { 'core-uid': 'uint32' },
  'returns': 'MCDCloseCoreResult' }


##
# @mcd-qry-error-info:
#
# Function allowing the access to detailed error and/or event information after
# an API call.
#
# @core-uid: Unique identifier of the open core as returned by @mcd-open-core.
#
# Returns: @MCDErrorInfo
#
# Since: 9.1
#
# .. qmp-example::
#    :title: Incompatible MCD versions
#
#     -> { "execute": "mcd-initialize",
#          "arguments": { "version-req": { "v-api-major": 2,
#                                          "v-api-minor": 0,
#                                          "author": "" } } }
#     <- {
#            "return": {
#                "return-status": 3
#            }
#        }
#     -> { "execute": "mcd-qry-error-info", "arguments": { "core-uid": 0 }}
#     <- {
#            "return": {
#                "error-str": "incompatible versions",
#                "error-code": 3840,
#                "error-events": 0,
#                "return-status": 3
#            }
#        }
##
{ 'command': 'mcd-qry-error-info',
  'data': { 'core-uid': 'uint32' },
  'returns': 'MCDErrorInfo' }


##
# @MCDQryMemSpacesResult:
#
# Return value of @mcd-qry-mem-spaces.
#
# @return-status:  Return code.
# @num-mem-spaces: The number of returned memory spaces. In case the input value
#                  of @num-mem-spaces is '0', this is the number of all
#                  available memory spaces for the selected core.
# @mem-spaces:     Memory space information.
#
# Since: 9.1
##
{ 'struct': 'MCDQryMemSpacesResult',
  'data': {
    'return-status'  : 'uint32',
    '*num-mem-spaces': 'uint32',
    '*mem-spaces'    : [ 'MCDMemspace' ] }}

##
# @mcd-qry-mem-spaces:
#
# Function querying the available memory spaces for a particular component.
#
# @core-uid:       Unique identifier of the open core as returned by
#                  @mcd-open-core.
# @start-index:    Start index of the requested memory spaces. This refers to
#                  an internal list of the target side implementation.
# @num-mem-spaces: Number of memory spaces, information is requested of. If it
#                  is set to '0', no memory space information is returned but
#                  the number of all available memory spaces for the selected
#                  core.
#
# Returns: @MCDQryMemSpacesResult
#
# Since: 9.1
#
# .. qmp-example::
#    :title: Arm TrustZone
#
#     -> { "execute": "mcd-qry-mem-spaces",
#          "arguments": { "core-uid": 1,
#                         "start-index": 0,
#                         "num-mem-spaces": 20 } }
#     <- {
#          "return": {
#              "mem-spaces": [
#                  {
#                      "mem-space-id": 1,
#                      "bits-per-mau": 0,
#                      "mem-space-name": "system",
#                      "endian": 0,
#                      "max-addr": 0,
#                      "mem-type": 16,
#                      "core-mode-mask-write": 0,
#                      "core-mode-mask-read": 0,
#                      "supported-access-options": 0,
#                      "invariance": 0,
#                      "num-mem-blocks": 0,
#                      "min-addr": 0
#                  },
#                  {
#                      "mem-space-id": 2,
#                      "bits-per-mau": 0,
#                      "mem-space-name": "cpu-memory-0",
#                      "endian": 0,
#                      "max-addr": 0,
#                      "mem-type": 32,
#                      "core-mode-mask-write": 0,
#                      "core-mode-mask-read": 0,
#                      "supported-access-options": 0,
#                      "invariance": 0,
#                      "num-mem-blocks": 0,
#                      "min-addr": 0
#                  },
#                  {
#                      "mem-space-id": 3,
#                      "bits-per-mau": 0,
#                      "mem-space-name": "secure-memory",
#                      "endian": 0,
#                      "max-addr": 0,
#                      "mem-type": 65552,
#                      "core-mode-mask-write": 0,
#                      "core-mode-mask-read": 0,
#                      "supported-access-options": 0,
#                      "invariance": 0,
#                      "num-mem-blocks": 0,
#                      "min-addr": 0
#                  },
#                  {
#                      "mem-space-id": 4,
#                      "bits-per-mau": 0,
#                      "mem-space-name": "cpu-secure-memory-0",
#                      "endian": 0,
#                      "max-addr": 0,
#                      "mem-type": 65568,
#                      "core-mode-mask-write": 0,
#                      "core-mode-mask-read": 0,
#                      "supported-access-options": 0,
#                      "invariance": 0,
#                      "num-mem-blocks": 0,
#                      "min-addr": 0
#                  },
#                  {
#                      "mem-space-id": 5,
#                      "bits-per-mau": 0,
#                      "mem-space-name": "GDB Registers",
#                      "endian": 0,
#                      "max-addr": 0,
#                      "mem-type": 1,
#                      "core-mode-mask-write": 0,
#                      "core-mode-mask-read": 0,
#                      "supported-access-options": 0,
#                      "invariance": 0,
#                      "num-mem-blocks": 0,
#                      "min-addr": 0
#                  }
#              ],
#              "return-status": 0,
#              "num-mem-spaces": 5
#          }
#        }
##
{ 'command': 'mcd-qry-mem-spaces',
  'data': {
     'core-uid'      : 'uint32',
     'start-index'   : 'uint32',
     'num-mem-spaces': 'uint32' },
  'returns': 'MCDQryMemSpacesResult' }


##
# @MCDQryRegGroupsResult:
#
# Return value of @mcd-qry-reg-groups.
#
# @return-status:  Return code.
# @num-reg-groups: Number of returned register groups. In case the input value
#                  of @num-reg-groups is '0', this is the number of all
#                  available register groups for the selected core.
# @reg-groups:     Register group information.
#
# Since: 9.1
##
{ 'struct': 'MCDQryRegGroupsResult',
  'data': {
    'return-status'  : 'uint32',
    '*num-reg-groups': 'uint32',
    '*reg-groups'    : [ 'MCDRegisterGroup' ] }}


##
# @mcd-qry-reg-groups:
#
# Function querying the register groups defined for a particular component.
#
# @core-uid:       Unique ID of the core the calling function addresses.
# @start-index:    Start index of the requested register groups. This refers
#                  to an internal list of the target side implementation.
# @num-reg-groups: Number of register groups, information is requested of. If
#                  it is set to '0', no register groups information is returned
#                  but the number of all available register groups for the
#                  selected core.
#
# Returns: @MCDQryRegGroupsResult
#
# Since: 9.1
##
{ 'command': 'mcd-qry-reg-groups',
  'data': {
    'core-uid'      : 'uint32',
    'start-index'   : 'uint32',
    'num-reg-groups': 'uint32' },
  'returns': 'MCDQryRegGroupsResult' }


##
# @MCDQryRegMapResult:
#
# Return value of @mcd-qry-reg-map.
#
# @return-status: Return code.
# @num-regs:      Number of returned registers. In case the input value of
#                 @num-regs is '0', this is the number of all available register
#                 for the selected register group.
# @reg-info:      Register information.
#
# Since: 9.1
##
{ 'struct': 'MCDQryRegMapResult',
  'data': {
    'return-status': 'uint32',
    '*num-regs'    : 'uint32',
    '*reg-info'    : [ 'MCDRegisterInfo' ] }}

##
# @mcd-qry-reg-map:
#
# Function querying the register information of a particular register group.
#
# @core-uid:     Unique ID of the core the calling function addresses.
# @reg-group-id: ID of the register group detailed register information is
#                requested for.
# @start-index:  Start index of the requested registers. This refers to an
#                internal list of the target side implementation.
# @num-regs:     Number of registers, information is requested of. If it
#                is set to '0', no register information is returned but the
#                number of all available registers within for the selected
#                register group.
#
# Returns: @MCDQryRegMapResult
#
# Since: 9.1
#
# .. qmp-example::
#
#     -> { "execute": "mcd-qry-reg-groups",
#          "arguments": { "core-uid": 1,
#                         "start-index": 0,
#                         "num-reg-groups": 3 } }
#     <- {
#            "return": {
#                "reg-groups": [
#                    {
#                        "reg-group-id": 1,
#                        "reg-group-name": "org.gnu.gdb.aarch64.core",
#                        "n-registers": 34
#                    },
#                    {
#                        "reg-group-id": 2,
#                        "reg-group-name": "org.gnu.gdb.aarch64.fpu",
#                        "n-registers": 34
#                    },
#                    {
#                        "reg-group-id": 3,
#                        "reg-group-name": "org.qemu.gdb.arm.sys.regs",
#                        "n-registers": 210
#                    }
#                ],
#                "return-status": 0,
#                "num-reg-groups": 3
#            }
#        }
#     -> { "execute": "mcd-qry-reg-map",
#          "arguments": { "core-uid": 1,
#                         "reg-group-id": 1,
#                         "start-index": 0,
#                         "num-regs": 34 } }
#     <- {
#            "return": {
#                "reg-info": [
#                    {
#                        "reg-group-id": 1,
#                        "regname": "x0",
#                        "side-effects-read": false,
#                        "addr": {
#                            "mem-space-id": 5,
#                            "addr-space-id": 0,
#                            "address": 0,
#                            "addr-space-type": 0
#                        },
#                        "reg-type": 0,
#                        "core-mode-mask-write": 0,
#                        "core-mode-mask-read": 0,
#                        "regsize": 64,
#                        "hw-thread-id": 0,
#                        "side-effects-write": false
#                    },
#                    {
#                        "reg-group-id": 1,
#                        "regname": "x1",
#                        "side-effects-read": false,
#                        "addr": {
#                            "mem-space-id": 5,
#                            "addr-space-id": 0,
#                            "address": 1,
#                            "addr-space-type": 0
#                        },
#                        "reg-type": 0,
#                        "core-mode-mask-write": 0,
#                        "core-mode-mask-read": 0,
#                        "regsize": 64,
#                        "hw-thread-id": 0,
#                        "side-effects-write": false
#                    },
#                    {
#                        "reg-group-id": 1,
#                        "regname": "x2",
#                        "side-effects-read": false,
#                        "addr": {
#                            "mem-space-id": 5,
#                            "addr-space-id": 0,
#                            "address": 2,
#                            "addr-space-type": 0
#                        },
#                        "reg-type": 0,
#                        "core-mode-mask-write": 0,
#                        "core-mode-mask-read": 0,
#                        "regsize": 64,
#                        "hw-thread-id": 0,
#                        "side-effects-write": false
#                    },
#                    {
#                        "reg-group-id": 1,
#                        "regname": "x3",
#                        "side-effects-read": false,
#                        "addr": {
#                            "mem-space-id": 5,
#                            "addr-space-id": 0,
#                            "address": 3,
#                            "addr-space-type": 0
#                        },
#                        "reg-type": 0,
#                        "core-mode-mask-write": 0,
#                        "core-mode-mask-read": 0,
#                        "regsize": 64,
#                        "hw-thread-id": 0,
#                        "side-effects-write": false
#                    },
#                    ...
#                ],
#                "return-status": 0,
#                "num-regs": 34
#            }
#        }
##
{ 'command': 'mcd-qry-reg-map',
  'data': {
    'core-uid': 'uint32',
    'reg-group-id': 'uint32',
    'start-index': 'uint32',
    'num-regs': 'uint32' },
  'returns': 'MCDQryRegMapResult' }


##
# == Target Execution Control API
##


##
# @MCDExecuteTxlistResult:
#
# Return value of @mcd-execute-txlist.
#
# @return-status: Return code.
# @txlist:        Transaction list after execution.
#
# Since: 9.1
##
{ 'struct': 'MCDExecuteTxlistResult',
  'data': {
    'return-status': 'uint32',
    '*txlist'      : 'MCDTxlist' }}


##
# @mcd-execute-txlist:
#
# Function executing a transaction list on the target.
#
# @core-uid: Unique identifier of the open core as returned by @mcd-open-core.
# @txlist:   Transaction list for execution.
#
# Returns: @MCDExecuteTxlistResult
#
# Since: 9.1
##
{ 'command': 'mcd-execute-txlist',
  'data': {
    'core-uid': 'uint32',
    'txlist'  : 'MCDTxlist' },
  'returns': 'MCDExecuteTxlistResult' }


##
# @MCDRunResult:
#
# Return value of @MCDRunResult.
#
# @return-status: Return code.
#
# Since: 9.1
##
{ 'struct': 'MCDRunResult', 'data': { 'return-status': 'uint32' } }


##
# @mcd-run:
#
# Function starting execution on a particular core.
#
# @core-uid: Unique identifier of the open core as returned by @mcd-open-core.
# @global:   Set to "TRUE" if all cores of a system shall start execution.
#            Otherwise, starting execution of selected core only.
#
# Returns: @MCDRunResult
#
# Since: 9.1
##
{ 'command': 'mcd-run',
  'data': {
    'core-uid': 'uint32',
    'global'  : 'bool' },
  'returns': 'MCDRunResult' }


##
# @MCDStopResult:
#
# Return value of @mcd-stop.
#
# @return-status: Return code.
#
# Since: 9.1
##
{ 'struct': 'MCDStopResult', 'data': { 'return-status': 'uint32' } }


##
# @mcd-stop:
#
# Function stopping execution on a particular core.
#
# @core-uid: Unique identifier of the open core as returned by @mcd-open-core.
# @global:   Set to "TRUE" if all cores of a system shall stop execution.
#            Otherwise, stopping execution of selected core only.
#
# Returns: @MCDStopResult
#
# Since: 9.1
##
{ 'command': 'mcd-stop',
  'data': {
    'core-uid': 'uint32',
    'global'  : 'bool' },
  'returns': 'MCDStopResult' }


##
# @MCDStepResult:
#
# Return value of @mcd-step.
#
# @return-status: Return code.
#
# Since: 9.1
##
{ 'struct': 'MCDStepResult', 'data': { 'return-status': 'uint32' } }


##
# @mcd-step:
#
# Function stepping a target core based on the particular step type.
#
# @core-uid:  Unique identifier of the open core as returned by @mcd-open-core.
# @global:    Set to "TRUE" if all cores of a system shall start
#             execution. Otherwise, starting execution of selected core only.
# @step-type: The unit, the stepping of the target core is based on.
# @n-steps:   The number of steps, the target core is stepped for.
#
# Returns: @MCDStepResult
#
# Since: 9.1
##
{ 'command': 'mcd-step',
  'data': {
    'core-uid' : 'uint32',
    'global'   : 'bool',
    'step-type': 'uint32',
    'n-steps'  : 'uint32' },
  'returns': 'MCDStepResult' }


##
# @MCDSetGlobalResult:
#
# Return value of @mcd-set-global.
#
# @return-status: Return code.
#
# Since: 9.1
##
{ 'struct': 'MCDSetGlobalResult', 'data': { 'return-status': 'uint32' } }


##
# @mcd-set-global:
#
# Function enabling/disabling global stop and run activities on this core.
#
# @core-uid: Unique identifier of the open core as returned by @mcd-open-core.
# @enable:   Set to "TRUE" if this core should perform global run or stop
#            activities.
#
# Returns: @MCDSetGlobalResult
#
# Since: 9.1
##
{ 'command': 'mcd-set-global',
  'data': {
    'core-uid': 'uint32',
    'enable'  : 'bool' },
  'returns': 'MCDSetGlobalResult' }

##
# @MCDQryStateResult:
#
# Return value of @mcd-qry-state.
#
# @return-status: Return code.
# @state:         The current execution state of the target core.
#
# Since: 9.1
##
{ 'struct': 'MCDQryStateResult',
  'data': {
    'return-status': 'uint32',
    '*state': 'MCDCoreState' }}


##
# @mcd-qry-state:
#
# Function querying the execution state of a target core.
#
# @core-uid: Unique identifier of the open core as returned by @mcd-open-core.
#
# Returns: @MCDQryStateResult
#
# Since: 9.1
##
{ 'command': 'mcd-qry-state',
  'data': { 'core-uid': 'uint32' },
  'returns': 'MCDQryStateResult' }


##
# == Reset Control API
##


##
# @MCDQryRstClassesResult:
#
# Return value of @mcd-qry-rst-classes.
#
# @return-status:    Return code.
# @rst-class-vector: A 32 bit vector that defines the available reset classes.
#
# Since: 9.1
##
{ 'struct': 'MCDQryRstClassesResult',
   'data': {
     'return-status': 'uint32',
     '*rst-class-vector': 'uint32' }}


##
# @mcd-qry-rst-classes:
#
# Function querying information about reset classes supported by the target
# system.
#
# @core-uid: Unique identifier of the open core as returned by @mcd-open-core.
#
# Returns: @MCDQryRstClassesResult
#
# Since: 9.1
##
{ 'command': 'mcd-qry-rst-classes',
  'data': { 'core-uid': 'uint32' },
  'returns': 'MCDQryRstClassesResult' }


##
# @MCDQryRstClassInfoResult:
#
# Return value of @mcd-qry-rst-class-info.
#
# @return-status: Return code.
# @rst-info:      Detailed information about the reset class.
#
# Since: 9.1
##
{ 'struct': 'MCDQryRstClassInfoResult',
  'data': {
    'return-status': 'uint32',
    '*rst-info': 'MCDRstInfo' }}


##
# @mcd-qry-rst-class-info:
#
# Function querying information about a particular reset class supported by the
# target system.
#
# @core-uid:  Unique identifier of the open core as returned by @mcd-open-core.
# @rst-class: Reset class ID which refers to a bit in the 32-bit reset class
#             vector as obtained by @mcd-qry-rst-classes.
#
# Returns: @MCDQryRstClassInfoResult
#
# Since: 9.1
##
{ 'command': 'mcd-qry-rst-class-info',
  'data': {
    'core-uid' : 'uint32',
    'rst-class': 'uint8'},
  'returns': 'MCDQryRstClassInfoResult' }


##
# @MCDRstResult:
#
# Return value of @mcd-rst.
#
# @return-status: Return code.
#
# Since: 9.1
##
{ 'struct': 'MCDRstResult', 'data': { 'return-status': 'uint32' } }


##
# @mcd-rst:
#
# Function triggering one or more reset signals in parallel on the target
# system.
#
# @core-uid:         Unique identifier of the open core as returned by
#                    @mcd-open-core.
# @rst-class-vector: Reset vector specifying the resets which shall be issued.
# @rst-and-halt:     Optionally halting the core if the reset changes the core
#                    state.
#
# Returns: @MCDRstResult
#
# Since: 9.1
##
{ 'command': 'mcd-rst',
  'data': {
    'core-uid'        : 'uint32',
    'rst-class-vector': 'uint32',
    'rst-and-halt'    : 'bool'},
  'returns': 'MCDRstResult' }


##
# == Target Trigger Setup API
##


##
# @MCDQryTrigInfoResult:
#
# Return value of @mcd-qry-trig-info.
#
# @return-status: Return code.
# @trig-info:     Information about supported triggers.
#
# Since: 9.1
##
{ 'struct': 'MCDQryTrigInfoResult',
  'data': {
    'return-status': 'uint32',
    '*trig-info'   : 'MCDTrigInfo' }}


##
# @mcd-qry-trig-info:
#
# Function querying information about trigger capabilities.
#
# @core-uid: Unique identifier of the open core as returned by @mcd-open-core.
#
# Returns: @MCDQryTrigInfoResult
#
# Since: 9.1
##
{ 'command': 'mcd-qry-trig-info',
  'data': { 'core-uid': 'uint32' },
  'returns': 'MCDQryTrigInfoResult' }


##
# @MCDQryCtrigsResult:
#
# Return value of @mcd-qry-ctrigs.
#
# @return-status: Return code.
# @num-ctrigs:    Number of returned custom triggers. In case the input value of
#                 @num_ctrigs is '0', this is the number of all available custom
#                 triggers for the selected core.
# @ctrig-info:    Custom trigger information.
#
# Since: 9.1
##
{ 'struct': 'MCDQryCtrigsResult',
  'data': {
    'return-status': 'uint32',
    '*num-ctrigs'  : 'uint32',
    '*ctrig-info'  : [ 'MCDCtrigInfo' ] }}


##
# @mcd-qry-ctrigs:
#
# Function querying information about custom triggers.
#
# @core-uid:    Unique identifier of the open core as returned by
#               @mcd-open-core.
# @start-index: Start index of the requested custom triggers. This refers
#               to an internal list of the target side implementation.
# @num-ctrigs:  Number of custom triggers, information is requested of. If it is
#               set to '0', no custom trigger information is returned but the
#               number of all available custom triggers for the selected core.
#
# Returns: @MCDQryCtrigsResult
#
# Since: 9.1
##
{ 'command': 'mcd-qry-ctrigs',
  'data': {
    'core-uid'   : 'uint32',
    'start-index': 'uint32',
    'num-ctrigs' : 'uint32' },
  'returns': 'MCDQryCtrigsResult' }


##
# @MCDCreateTrigResult:
#
# Return value of @mcd-create-trig.
#
# @return-status: Return code.
# @trig:          Information about the created trigger object.
# @trig-id:       Unique ID for the newly created trigger returned by the API
#                 implementation. A value of '0' indicates that the breakpoint
#                 is set, but cannot be identified by an ID. Removing such
#                 breakpoints is only possible by calling @mcd-remove-trig-set.
#
# Since: 9.1
##
{ 'struct': 'MCDCreateTrigResult',
  'data': {
    'return-status': 'uint32',
    '*trig'        : 'MCDTrig',
    '*trig-id'     : 'uint32' }}


##
# @mcd-create-trig:
#
# Function allowing the creation of a new trigger.
#
# @core-uid: Unique identifier of the open core as returned by @mcd-open-core.
# @trig:     Information about the trigger object to be created.
#
# Returns: @MCDCreateTrigResult
#
# Since: 9.1
##
{ 'command': 'mcd-create-trig',
  'data': {
    'core-uid': 'uint32',
    'trig'    : 'MCDTrig' },
  'returns': 'MCDCreateTrigResult' }


##
# @MCDQryTrigResult:
#
# Return value of @mcd-qry-trig.
#
# @return-status: Return code.
# @trig:          Information about the trigger object.
#
# Since: 9.1
##
{ 'struct': 'MCDQryTrigResult',
  'data': {
    'return-status': 'uint32',
    '*trig'        : 'MCDTrig' }}


##
# @mcd-qry-trig:
#
# Function querying the contents of a trigger.
#
# @core-uid: Unique identifier of the open core as returned by @mcd-open-core.
# @trig-id:  ID of the trigger the user queries.
#
# Returns: @MCDQryTrigResult
#
# Since: 9.1
##
{ 'command': 'mcd-qry-trig',
  'data': {
    'core-uid': 'uint32',
    'trig-id' : 'uint32'},
  'returns': 'MCDQryTrigResult' }


##
# @MCDRemoveTrigResult:
#
# Return value of @mcd-remove-trig.
#
# @return-status: Return code.
#
# Since: 9.1
##
{ 'struct': 'MCDRemoveTrigResult', 'data': { 'return-status': 'uint32' } }


##
# @mcd-remove-trig:
#
# Function allowing a user to delete a particular trigger from a trigger set.
#
# @core-uid: Unique identifier of the open core as returned by @mcd-open-core.
# @trig-id:  ID of the trigger the user wants to delete.
#
# Returns: @MCDRemoveTrigResult
#
# Since: 9.1
##
{ 'command': 'mcd-remove-trig',
  'data': {
    'core-uid': 'uint32',
    'trig-id' : 'uint32' },
  'returns': 'MCDRemoveTrigResult' }


##
# @MCDQryTrigStateResult:
#
# Return value of @mcd-qry-trig-state.
#
# @return-status: Return code.
# @trig-state:    Queried Trigger state.
#
# Since: 9.1
##
{ 'struct': 'MCDQryTrigStateResult',
  'data': {
    'return-status': 'uint32',
    '*trig-state'  : 'MCDTrigState' }}


##
# @mcd-qry-trig-state:
#
# Function allowing a user to query the trigger states from the target.
#
# @core-uid: Unique identifier of the open core as returned by @mcd-open-core.
# @trig-id:  ID of the trigger, the tool queries the state for.
#
# Returns: @MCDQryTrigStateResult
#
# Since: 9.1
##
{ 'command': 'mcd-qry-trig-state',
  'data': {
    'core-uid': 'uint32',
    'trig-id' : 'uint32' },
  'returns': 'MCDQryTrigStateResult' }


##
# @MCDActivateTrigSetResult:
#
# Return value of @mcd-activate-trig-set.
#
# @return-status: Return code.
#
# Since: 9.1
##
{ 'struct': 'MCDActivateTrigSetResult', 'data': { 'return-status': 'uint32' } }


##
# @mcd-activate-trig-set:
#
# Function allowing a user to activate a trigger set on the target.
#
# @core-uid: Unique identifier of the open core as returned by @mcd-open-core.
#
# Returns: @MCDActivateTrigSetResult
#
# Since: 9.1
##
{ 'command': 'mcd-activate-trig-set',
  'data': { 'core-uid': 'uint32' },
  'returns': 'MCDActivateTrigSetResult' }


##
# @MCDRemoveTrigSetResult:
#
# Return value of @mcd-remove-trig-set.
#
# @return-status: Return code.
#
# Since: 9.1
##
{ 'struct': 'MCDRemoveTrigSetResult', 'data': { 'return-status': 'uint32' } }


##
# @mcd-remove-trig-set:
#
# Function allowing a user to delete a trigger set.
#
# @core-uid: Unique identifier of the open core as returned by @mcd-open-core.
#
# Returns: @MCDActivateTrigSetResult
#
# Since: 9.1
##
{ 'command': 'mcd-remove-trig-set',
  'data': { 'core-uid': 'uint32' },
  'returns': 'MCDActivateTrigSetResult' }


##
# @MCDQryTrigSetResult:
#
# Return value of @mcd-qry-trig-set.
#
# @return-status: Return code.
# @num-trigs:     The number of returned triggers. In case the input value of
#                 @num_trigs is '0', this is the number of all available triggers
#                 of this core's trigger set.
# @trig-ids:      List of trigger IDs set in the target.
#
# Since: 9.1
##
{ 'struct': 'MCDQryTrigSetResult',
  'data': {
    'return-status': 'uint32',
    '*num-trigs'   : 'uint32',
    '*trig-ids'    : [ 'uint32' ] }}


##
# @mcd-qry-trig-set:
#
# Function querying the contents of a trigger set.
#
# @core-uid:    Unique identifier of the open core as returned by
#               @mcd-open-core.
# @start-index: Start index of the requested triggers. This refers to an
#               internal list of the target side implementation.
# @num-trigs:   The number of queried triggers starting from the defined
#               @start-index. If it is set to '0', no triggers are returned but
#               the number of all available triggers of the trigger set.
#
# Returns: @MCDQryTrigSetResult
#
# Since: 9.1
##
{ 'command': 'mcd-qry-trig-set',
  'data': {
      'core-uid'   : 'uint32',
      'start-index': 'uint32',
      'num-trigs'  : 'uint32' },
  'returns': 'MCDQryTrigSetResult' }


##
# @MCDQryTrigSetStateResult:
#
# Return value of @mcd-qry-trig-set-state.
#
# @return-status: Return code.
# @trig-state:    Information about the current state of the trigger set.
#
# Since: 9.1
##
{ 'struct': 'MCDQryTrigSetStateResult',
  'data': {
    'return-status': 'uint32',
    '*trig-state'  : 'MCDTrigSetState' }}


##
# @mcd-qry-trig-set-state:
#
# Function querying the state of a trigger set.
#
# @core-uid: Unique identifier of the open core as returned by @mcd-open-core.
#
# Returns: @MCDQryTrigSetStateResult
#
# Since: 9.1
##
{ 'command': 'mcd-qry-trig-set-state',
  'data': { 'core-uid': 'uint32' },
  'returns': 'MCDQryTrigSetStateResult' }
