# -*- Mode: Python -*-
# vim: filetype=python

##
# = Multi-Core Debug (MCD) API
##


##
# == Definition of Structures
##


##
# @MCDAPIVersion:
#
# Structure type containing the MCD API version information of the tool.
#
# @v-api-major: API major version.
# @v-api-minor: API minor version.
# @author:      API name of the author of this MCD API version.
#
# Since: 9.1
##
{ 'struct': 'MCDAPIVersion',
  'data': {
    'v-api-major': 'uint16',
    'v-api-minor': 'uint16',
    'author':      'str' } }


##
# @MCDImplVersionInfo:
#
# Structure type containing the MCD API implementation information.
#
# @v-api:       Implemented API version.
# @v-imp-major: Major version number of this implementation.
# @v-imp-minor: Minor version number of this implementation.
# @v-imp-build: Build number of this implementation.
# @vendor:      Name of vendor of the implementation.
# @date:        String from __DATE__ macro at compile time.
#
# Since: 9.1
##
{ 'struct': 'MCDImplVersionInfo',
  'data': {
    'v-api'      : 'MCDAPIVersion',
    'v-imp-major': 'uint16',
    'v-imp-minor': 'uint16',
    'v-imp-build': 'uint16',
    'vendor'     : 'str',
    'date'       : 'str' } }


##
# @MCDErrorInfo:
#
# Structure type containing the error status and error event notification.
#
# @return-status: Return status from the last API call.
# @error-code:    Detailed error code from the last API call.
# @error-events:  Detailed event code from the last API call.
# @error-str:     Detailed error text string from the last API call.
#
# Since: 9.1
##
{ 'struct': 'MCDErrorInfo',
  'data': {
    'return-status': 'uint32',
    'error-code'   : 'uint32',
    'error-events' : 'uint32',
    'error-str'    : 'str' }}


##
# @MCDServerInfo:
#
# Structure type containing the server information.
#
# @server:          String containing the server name.
# @system-instance: String containing the unique system instance identifier.
# @acc-hw:          String containing the unique device access hardware name.
#
# Since: 9.1
##
{ 'struct': 'MCDServerInfo',
  'data': {
    'server'         : 'str',
    'system-instance': 'str',
    'acc-hw'         : 'str' } }


##
# @MCDCoreConInfo:
#
# Structure type containing the core connection information.
#
# @host:            String containing the IP host name.
# @server-port:     Port number of the server.
# @server-key:      String containing the server key as provided by
#                   mcd_open_server_f().
# @system-key:      String containing the system key as provided by
#                   mcd_open_server_f().
# @device-key:      String containing the device key, optional for
#                   mcd_open_core_f().
# @system:          String containing the system name. Predefined value is
#                   "Real HW" for physical devices. Note that in case of "Real
#                   HW" the @acc-hw always needs to be defined.
# @system-instance: String containing the unique system instance identifier.
#                   Allows to differentiate between several system instances
#                   with the same name. A typical use case is a simulator where
#                   different instances can be distinguished by their process
#                   ID. (For example @system-instance could be: "Process ID:
#                   1234")
# @acc-hw:          String containing the unique device access hardware name.
# @device-type:     Device type identifier (IEEE 1149.1 device ID)
# @device:          String containing the system unique device instance name.
#                   For Real HW this is usually the sales name of the device.
#                   If the access hardware operates a multi device target
#                   system (e.g. over IEEE1149.7), this device string can
#                   contain an index to differentiate between several devices
#                   of the same type.
# @device-id:       Unique device ID.
# @core:            String containing the device unique core name.
# @core-type:       Core type identifier (taken from ELF predefined
#                   architecture)
# @core-id:         Unique core ID representing the core version.
#
# Since: 9.1
##
{ 'struct': 'MCDCoreConInfo',
  'data': {
    'host'           : 'str',
    'server-port'    : 'uint32',
    'server-key'     : 'str',
    'system-key'     : 'str',
    'device-key'     : 'str',
    'system'         : 'str',
    'system-instance': 'str',
    'acc-hw'         : 'str',
    'device-type'    : 'uint32',
    'device'         : 'str',
    'device-id'      : 'uint32',
    'core'           : 'str',
    'core-type'      : 'uint32',
    'core-id'        : 'uint32' } }


##
# == Target Initialization API
##


##
# @MCDInitializeResult:
#
# Return value of @mcd-initialize.
#
# @return-status: Return code.
#
# @impl-info: Information about the QEMU build, its version and the version of
#             the implemented MCD API.
#
# Since: 9.1
##
{ 'struct': 'MCDInitializeResult',
  'data': {
    'return-status': 'uint32',
    '*impl-info'   : 'MCDImplVersionInfo' } }


##
# @mcd-initialize:
#
# Function initializing the interaction between a tool-side implementation and
# target-side implementation.
#
# @version-req: MCD API version as requested by an upper layer.
#
# Returns: @MCDInitializeResult
#
# Since: 9.1
#
# .. qmp-example::
#    :title: Check compatibility with MCD server
#
#     -> { "execute": "mcd-initialize",
#          "arguments": { "version-req": { "v-api-major": 1,
#                                          "v-api-minor": 1,
#                                          "author": "" } } }
#     <- {
#            "return": {
#                "impl-info": {
#                    "v-api": {
#                        "v-api-minor": 1,
#                        "v-api-major": 1,
#                        "author": "QEMU Release"
#                    },
#                    "vendor": "QEMU",
#                    "v-imp-minor": 2,
#                    "v-imp-major": 9,
#                    "v-imp-build": 0,
#                    "date": "Dec 18 2024"
#                },
#                "return-status": 0
#            }
#        }
##
{ 'command': 'mcd-initialize',
  'data': { 'version-req': 'MCDAPIVersion' },
  'returns': 'MCDInitializeResult' }


##
# @mcd-exit:
#
# Function cleaning up all core and server connections from a tool.
#
# Since: 9.1
##
{ 'command': 'mcd-exit' }


##
# == Server Connection API
##


##
# @MCDQryServersResult:
#
# Return value of @mcd-qry-servers.
#
# @return-status: Return code.
# @num-servers:   The number of returned servers. In case the input value of
#                 @num-servers is '0', this is the number of all available
#                 servers.
# @server-info:   Server information.
#
# Since: 9.1
##
{ 'struct': 'MCDQryServersResult',
  'data': {
    'return-status': 'uint32',
    '*num-servers' : 'uint32',
    '*server-info' : [ 'MCDServerInfo' ] }}


##
# @mcd-qry-servers:
#
# Function returning a list of available servers.
#
# @host:        String containing the host name.
# @running:     Selects between running and installed servers.
# @start-index: Start index of the queried servers. This refers to an
#               internal list of the target side implementation.
# @num-servers: The number of queried servers starting from the defined
#               @start-index. If it is set to '0', no server descriptions are
#               returned but the number of all available servers.
#
# Returns: @MCDQryServersResult
#
# Since: 9.1
#
# .. qmp-example::
#
#     -> { "execute": "mcd-qry-servers",
#        "arguments": { "host": "",
#                       "running": true,
#                       "start-index": 0,
#                       "num-servers": 0 } }
#    <- {
#           "return": {
#               "num-servers": 1,
#               "return-status": 0
#           }
#       }
#
#    -> { "execute": "mcd-qry-servers",
#         "arguments": { "host": "",
#                        "running": true,
#                        "start-index": 0,
#                        "num-servers": 1 } }
#    <- {
#           "return": {
#               "num-servers": 1,
#               "server-info": [
#                   {
#                       "system-instance": "Process ID: 44801",
#                       "acc-hw": "",
#                       "server": "QEMU"
#                   }
#               ],
#               "return-status": 0
#           }
#       }
##
{ 'command': 'mcd-qry-servers',
  'data': {
    'host'       : 'str',
    'running'    : 'bool',
    'start-index': 'uint32',
    'num-servers': 'uint32' },
  'returns': 'MCDQryServersResult' }


##
# @MCDOpenServerResult:
#
# Return value of @mcd-open-server.
#
# @return-status: Return code.
# @server-uid:    Unique identifier of the server instance.
# @host:          String containing the host name.
# @config-string: Server configuration information.
#
# Since: 9.1
##
{ 'struct': 'MCDOpenServerResult',
  'data': {
    'return-status' : 'uint32',
    '*server-uid'   : 'uint32',
    '*host'         : 'str',
    '*config-string': 'str' } }


##
# @mcd-open-server:
#
# Function opening the connection to a server on a host computer.
#
# @system-key:    A server is claimed by this key when being opened.
# @config-string: Allows the configuration of the server connection by a
#                 character string. Delimiters are blanks, tabs and line
#                 breaks. Value strings are always enclosed with "double
#                 quotes". Bool values can be "TRUE" or "FALSE" (both in
#                 small letters).
#
# Returns: @MCDOpenServerResult
#
# Since: 9.1
#
# .. qmp-example::
#
#    -> { "execute": "mcd-open-server",
#         "arguments": { "system-key": "",
#                        "config-string": "" } }
#    <- {
#           "return": {
#               "config-string": "",
#               "host": "QEMU",
#               "server-uid": 1,
#               "return-status": 0
#           }
#       }
#    -> { "execute": "mcd-open-server",
#         "arguments": { "system-key": "",
#                        "config-string": "" } }
#    <- {
#           "return": {
#               "return-status": 3
#           }
#       }
#    -> { "execute": "mcd-qry-error-info" }
#    <- {
#           "return": {
#               "error-str": "server already open",
#               "error-code": 512,
#               "error-events": 0,
#               "return-status": 3
#           }
#       }
##
{ 'command': 'mcd-open-server',
  'data': {
    'system-key'   : 'str',
    'config-string': 'str' },
  'returns': 'MCDOpenServerResult' }


##
# @MCDCloseServerResult:
#
# Return value of @mcd-close-server.
#
# @return-status: Return code.
#
# Since: 9.1
##
{ 'struct': 'MCDCloseServerResult', 'data': { 'return-status': 'uint32' } }


##
# @mcd-close-server:
#
# Function closing the connection to a debug server on a host computer.
#
# @server-uid: Unique identifier of the open server as returned by
#              @mcd-open-server.
#
# Returns: @MCDCloseServerResult.
#
# Since: 9.1
##
{ 'command': 'mcd-close-server',
  'data': { 'server-uid': 'uint32' },
  'returns': 'MCDCloseServerResult' }


##
# == Target System Features API
##


##
# @MCDQrySystemsResult:
#
# Return value of @mcd-qry-systems.
#
# @return-status:   Return code.
# @num-systems:     The number of systems the core connection info was returned
#                   for. In case the input value of @num-systems is '0', this is
#                   the number of all available systems.
# @system-con-info: Core connection information of the requested systems.
#
# Since: 9.1
##
{ 'struct': 'MCDQrySystemsResult',
  'data': {
    'return-status'   : 'uint32',
    '*num-systems'    : 'uint32',
    '*system-con-info': [ 'MCDCoreConInfo' ] }}


##
# @mcd-qry-systems:
#
# Function querying the core connection information of a specified number of
# systems.
#
# @start-index: Start index of the queried systems. This refers to an
#               internal list of the target side implementation.
# @num-systems: The number of queried systems starting from the defined
#               @start-index. If it is set to '0', no core connection
#               information is returned but the number of available systems.
#
# Returns: @MCDQrySystemsResult
#
# Since: 9.1
#
# .. qmp-example::
#
#     -> { "execute": "mcd-qry-systems",
#          "arguments": { "start-index": 0,
#                         "num-systems": 1 } }
#     <- {
#            "return": {
#                "num-systems": 1,
#                "system-con-info": [
#                    {
#                        "core-id": 0,
#                        "device": "",
#                        "device-id": 0,
#                        "device-key": "",
#                        "system": "qemu-system-aarch64",
#                        "core": "",
#                        "host": "",
#                        "system-key": "",
#                        "system-instance": "Process ID: 21591",
#                        "acc-hw": "",
#                        "core-type": 0,
#                        "device-type": 0,
#                        "server-key": "",
#                        "server-port": 0
#                    }
#                ],
#                "return-status": 0
#            }
#        }
##
{ 'command': 'mcd-qry-systems',
  'data': {
    'start-index': 'uint32',
    'num-systems': 'uint32' },
  'returns': 'MCDQrySystemsResult' }


##
# @MCDQryDevicesResult:
#
# Return value of @mcd-qry-devices.
#
# @return-status:   Return code.
# @num-devices:     The number of devices the core connection information was
#                   returned for. In case the input value of @num-devices is
#                   '0', this is the number of all available devices for the
#                   selected system.
# @device-con-info: Core connection information of the requested devices.
#
# Since: 9.1
##
{ 'struct': 'MCDQryDevicesResult',
  'data': {
    'return-status'   : 'uint32',
    '*num-devices'    : 'uint32',
    '*device-con-info': [ 'MCDCoreConInfo' ] }}


##
# @mcd-qry-devices:
#
# Function querying the core connection information of a specified number of
# devices of a system.
#
# @system-con-info: Core connection information of the system the devices
#                   are queried from.
# @start-index:     Start index of the requested devices. This refers to
#                   an internal list of the target side implementation.
# @num-devices:     The number of queried devices (e.g. simulated on or
#                   connected to this host computer) starting from the defined
#                   @start-index. If it is set to '0', no core connection
#                   information is returned but the number of all available
#                   devices.
#
# Returns: @MCDQryDevicesResult
#
# Since: 9.1
#
# .. qmp-example::
#
#     -> { "execute": "mcd-qry-devices",
#          "arguments": {
#              "start-index": 0,
#               "num-devices": 1,
#               "system-con-info": {
#                   "core-id": 0,
#                   "device": "",
#                   "device-id": 0,
#                   "device-key": "",
#                   "system": "qemu-system-aarch64",
#                   "core": "",
#                   "host": "",
#                   "system-key": "",
#                   "system-instance": "",
#                   "acc-hw": "",
#                   "core-type": 0,
#                   "device-type": 0,
#                   "server-key": "",
#                   "server-port": 0 } } }
#     <- {
#            "return": {
#                "return-status": 0,
#                "num-devices": 1,
#                "device-con-info": [
#                    {
#                        "core-id": 0,
#                        "device": "virt-10.0",
#                        "device-id": 0,
#                        "device-key": "",
#                        "system": "qemu-system-aarch64",
#                        "core": "",
#                        "host": "",
#                        "system-key": "",
#                        "system-instance": "",
#                        "acc-hw": "",
#                        "core-type": 0,
#                        "device-type": 0,
#                        "server-key": "",
#                        "server-port": 0
#                    }
#                ]
#            }
#        }
##
{ 'command': 'mcd-qry-devices',
  'data': {
    'system-con-info': 'MCDCoreConInfo',
    'start-index'    : 'uint32',
    'num-devices'    : 'uint32' },
  'returns': 'MCDQryDevicesResult' }


##
# @MCDQryCoresResult:
#
# Return value of @mcd-qry-cores.
#
# @return-status: Return code.
#
# @num-cores:     The number of cores the core connection information
#                 is returned for. In case the input value of @num-cores is '0',
#                 this is the number of all available cores for the selected
#                 system or device.
# @core-con-info: Core connection information of the requested cores.
#
# Since: 9.1
##
{ 'struct': 'MCDQryCoresResult',
  'data': {
  'return-status' : 'uint32',
  '*num-cores'    : 'uint32',
  '*core-con-info': [ 'MCDCoreConInfo' ] }}


##
# @mcd-qry-cores:
#
# Function querying the core connection information of a specified number of
# cores of a system/device.
#
# @connection-info: Core connection information of the system or device
#                   the cores are queried from.
# @start-index:     Start index of the requested cores. This refers to an
#                   internal list of the target side implementation.
# @num-cores:       The number of queried cores starting from the defined
#                   @start-index. If it is set to '0', no core connection
#                   information is returned but the number of all available
#                   cores.
#
# Returns: @MCDQryCoresResult
#
# Since: 9.1
#
# .. qmp-example::
#    :title: Multicore
#
#     -> { "execute": "mcd-qry-cores",
#          "arguments": {
#              "start-index": 0,
#               "num-cores": 3,
#               "connection-info": {
#                   "core-id": 0,
#                   "device": "virt-10.0",
#                   "device-id": 0,
#                   "device-key": "",
#                   "system": "",
#                   "core": "",
#                   "host": "",
#                   "system-key": "qemu-system-aarch64",
#                   "system-instance": "",
#                   "acc-hw": "",
#                   "core-type": 0,
#                   "device-type": 0,
#                   "server-key": "",
#                   "server-port": 0 } } }
#     <- {
#            "return": {
#                "num-cores": 3,
#                "core-con-info": [
#                    {
#                        "core-id": 0,
#                        "device": "virt-10.0",
#                        "device-id": 0,
#                        "device-key": "",
#                        "system": "",
#                        "core": "cortex-a53-arm-cpu",
#                        "host": "",
#                        "system-key": "qemu-system-aarch64",
#                        "system-instance": "",
#                        "acc-hw": "",
#                        "core-type": 0,
#                        "device-type": 0,
#                        "server-key": "",
#                        "server-port": 0
#                    },
#                    {
#                        "core-id": 1,
#                        "device": "virt-10.0",
#                        "device-id": 0,
#                        "device-key": "",
#                        "system": "",
#                        "core": "cortex-a53-arm-cpu",
#                        "host": "",
#                        "system-key": "qemu-system-aarch64",
#                        "system-instance": "",
#                        "acc-hw": "",
#                        "core-type": 0,
#                        "device-type": 0,
#                        "server-key": "",
#                        "server-port": 0
#                    },
#                    {
#                        "core-id": 2,
#                        "device": "virt-10.0",
#                        "device-id": 0,
#                        "device-key": "",
#                        "system": "",
#                        "core": "cortex-a53-arm-cpu",
#                        "host": "",
#                        "system-key": "qemu-system-aarch64",
#                        "system-instance": "",
#                        "acc-hw": "",
#                        "core-type": 0,
#                        "device-type": 0,
#                        "server-key": "",
#                        "server-port": 0
#                    }
#                ],
#                "return-status": 0
#            }
#        }
##
{ 'command': 'mcd-qry-cores',
  'data': {
    'connection-info': 'MCDCoreConInfo',
    'start-index'    : 'uint32',
    'num-cores'      : 'uint32' },
  'returns': 'MCDQryCoresResult' }

##
# == Core Connection API
##

##
# @MCDOpenCoreResult:
#
# Return value of @mcd-open-core.
#
# @return-status: Return code.
# @core-uid:      Unique identifier of the core instance.
# @core-con-info: Core connection information of the core instance.
#
# Since: 9.1
##
{ 'struct': 'MCDOpenCoreResult',
  'data': {
    'return-status' : 'uint32',
    '*core-uid'     : 'uint32',
    '*core-con-info': 'MCDCoreConInfo' }}


##
# @mcd-open-core:
#
# Function opening a core connection.
#
# @core-con-info: Unambiguous core information (e.g. from @mcd-qry-cores).
#
# Returns: @MCDOpenCoreResult
#
# Since: 9.1
#
# .. qmp-example::
#
#     -> { "execute": "mcd-open-core",
#          "arguments": {
#              "core-con-info": {
#                  "core-id": 0,
#                  "device": "virt-10.0",
#                  "device-id": 0,
#                  "device-key": "",
#                  "system": "",
#                  "core": "cortex-a53-arm-cpu",
#                  "host": "",
#                  "system-key": "qemu-system-aarch64",
#                  "system-instance": "",
#                  "acc-hw": "",
#                  "core-type": 0,
#                  "device-type": 0,
#                  "server-key": "",
#                  "server-port": 0 } } }
#     <- {
#          "return": {
#              "core-con-info": {
#                  "core-id": 0,
#                  "device": "virt-10.0",
#                  "device-id": 0,
#                  "device-key": "",
#                  "system": "",
#                  "core": "cortex-a53-arm-cpu",
#                  "host": "",
#                  "system-key": "qemu-system-aarch64",
#                  "system-instance": "",
#                  "acc-hw": "",
#                  "core-type": 0,
#                  "device-type": 0,
#                  "server-key": "",
#                  "server-port": 0
#              },
#              "return-status": 0,
#              "core-uid": 1
#          }
#        }
##
{ 'command': 'mcd-open-core',
  'data': { 'core-con-info': 'MCDCoreConInfo' },
  'returns': 'MCDOpenCoreResult' }


##
# @MCDCloseCoreResult:
#
# Return value of @mcd-close-core.
#
# @return-status: Return code.
#
# Since: 9.1
##
{ 'struct': 'MCDCloseCoreResult', 'data': { 'return-status': 'uint32' } }


##
# @mcd-close-core:
#
# Function closing a core connection.
#
# @core-uid: Unique identifier of the open core as returned by @mcd-open-core.
#
# Returns: @MCDCloseCoreResult
#
# Since: 9.1
#
# .. qmp-example::
#
#     -> { "execute": "mcd-close-core", "arguments": { "core-uid": 1 } }
#     <- {
#            "return": {
#                "return-status": 0
#            }
#        }
#     -> { "execute": "mcd-close-core", "arguments": { "core-uid": 1 } }
#     <- {
#            "return": {
#                "return-status": 3
#            }
#        }
#     -> { "execute": "mcd-qry-error-info", "arguments": { "core-uid": 1 } }
#     <- {
#            "return": {
#                "error-str": "core not open",
#                "error-code": 512,
#                "error-events": 0,
#                "return-status": 3
#            }
#        }
##
{ 'command': 'mcd-close-core',
  'data': { 'core-uid': 'uint32' },
  'returns': 'MCDCloseCoreResult' }


##
# @mcd-qry-error-info:
#
# Function allowing the access to detailed error and/or event information after
# an API call.
#
# @core-uid: Unique identifier of the open core as returned by @mcd-open-core.
#
# Returns: @MCDErrorInfo
#
# Since: 9.1
#
# .. qmp-example::
#    :title: Incompatible MCD versions
#
#     -> { "execute": "mcd-initialize",
#          "arguments": { "version-req": { "v-api-major": 2,
#                                          "v-api-minor": 0,
#                                          "author": "" } } }
#     <- {
#            "return": {
#                "return-status": 3
#            }
#        }
#     -> { "execute": "mcd-qry-error-info", "arguments": { "core-uid": 0 }}
#     <- {
#            "return": {
#                "error-str": "incompatible versions",
#                "error-code": 3840,
#                "error-events": 0,
#                "return-status": 3
#            }
#        }
##
{ 'command': 'mcd-qry-error-info',
  'data': { 'core-uid': 'uint32' },
  'returns': 'MCDErrorInfo' }
