# -*- Mode: Python -*-
# vim: filetype=python
##
# = Introduction
#
# This document describes all commands currently supported by QMP.
#
# Most of the time their usage is exactly the same as in the user
# Monitor, this means that any other document which also describe
# commands (the manpage, QEMU's manual, etc) can and should be
# consulted.
#
# QMP has two types of commands: regular and query commands.  Regular
# commands usually change the Virtual Machine's state someway, while
# query commands just return information.  The sections below are
# divided accordingly.
#
# It's important to observe that all communication examples are
# formatted in a reader-friendly way, so that they're easier to
# understand.  However, in real protocol usage, they're emitted as a
# single line.
#
# Also, the following notation is used to denote data flow:
#
# Example:
#
# ::
#
#   -> data issued by the Client
#   <- Server data response
#
# Please refer to the
# :doc:`QEMU Machine Protocol Specification </interop/qmp-spec>`
# for detailed information on the Server command and response formats.
##

{ 'include': 'pragma.json' }

# Documentation generated with qapi-gen.py is in source order, with
# included sub-schemas inserted at the first include directive
# (subsequent include directives have no effect). Please place the
# file correctly in the following sections according to the
# dependencies.
#
# To get a sane and stable order, it's best to include each sub-schema
# just once, or include it first right here.

# Section 1. Files without dependencies.

{ 'include': 'acpi.json' }
{ 'include': 'audio.json' }
{ 'include': 'authz.json' }
{ 'include': 'common.json' }
{ 'include': 'compat.json' }
{ 'include': 'control.json' }
{ 'include': 'crypto.json' }
{ 'include': 'cryptodev.json' }
{ 'include': 'cxl.json' }
{ 'include': 'dump.json' }
{ 'include': 'ebpf.json' }
{ 'include': 'error.json' }
{ 'include': 'introspect.json' }
{ 'include': 'job.json' }
{ 'include': 'machine-common.json' }
{ 'include': 'misc-target.json' }
{ 'include': 'pci.json' }
{ 'include': 'rocker.json' }
{ 'include': 'run-state.json' }
{ 'include': 'sockets.json' }
{ 'include': 'stats.json' }
{ 'include': 'tpm.json' }
{ 'include': 'trace.json' }
{ 'include': 'virtio.json' }
{ 'include': 'yank.json' }

# Section 2. Files with 1-level dependencies.
#
# All their dependencies are listed in the section 1.

# include common.json, crypto.json, job.json, sockets.json
{ 'include': 'block-core.json' }
# include sockets.json
{ 'include': 'char.json' }
# include machine-common.json
{ 'include': 'machine-target.json' }
# include common.json, machine-common.json
{ 'include': 'machine.json' }
# include common.json, sockets.json
{ 'include': 'migration.json' }
# include common.json
{ 'include': 'misc.json' }
# include sockets.json
{ 'include': 'net.json' }
# include common.json
{ 'include': 'replay.json' }
# include common.json, sockets.json
{ 'include': 'ui.json' }

# Section 3. Files with 2-level dependencies.
#
# All their dependencies are listed in the previous sections. At least one
# dependency is from section 2.

# include sockets.json (section 1), block-core.json (section 2)
{ 'include': 'block-export.json' }
# include block-core.json (section 2)
{ 'include': 'block.json' }
# include authz.json (section 1), common.json (section 1), crypto.json
# (section 1), block-core.json (section 2)
{ 'include': 'qom.json' }
# include block-core.json (section 2)
{ 'include': 'transaction.json' }

# Section 4. Files with 3-level dependencies.
#
# All their dependencies are listed in the previous sections. At least one
# dependency is from section 3.

# include qom.json (section 3)
{ 'include': 'qdev.json' }
