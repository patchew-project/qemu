# -*- Mode: Python -*-
# vim: filetype=python
#
# SPDX-License-Identifier: GPL-2.0-or-later

##
# @rtc-reset-reinjection:
#
# This command will reset the RTC interrupt reinjection backlog.  Can
# be used if another mechanism to synchronize guest time is in effect,
# for example QEMU guest agent's guest-set-time command.
#
# Use of this command is only applicable for x86 machines with an RTC,
# and on other machines will silently return without performing any
# action.
#
# Since: 2.1
#
# .. qmp-example::
#
#     -> { "execute": "rtc-reset-reinjection" }
#     <- { "return": {} }
##
{ 'command': 'rtc-reset-reinjection' }

##
# @SevState:
#
# An enumeration of SEV state information used during @query-sev.
#
# @uninit: The guest is uninitialized.
#
# @launch-update: The guest is currently being launched; plaintext
#     data and register state is being imported.
#
# @launch-secret: The guest is currently being launched; ciphertext
#     data is being imported.
#
# @running: The guest is fully launched or migrated in.
#
# @send-update: The guest is currently being migrated out to another
#     machine.
#
# @receive-update: The guest is currently being migrated from another
#     machine.
#
# Since: 2.12
##
{ 'enum': 'SevState',
  'data': ['uninit', 'launch-update', 'launch-secret', 'running',
           'send-update', 'receive-update' ] }

##
# @SevGuestType:
#
# An enumeration indicating the type of SEV guest being run.
#
# @sev: The guest is a legacy SEV or SEV-ES guest.
#
# @sev-snp: The guest is an SEV-SNP guest.
#
# Since: 6.2
##
{ 'enum': 'SevGuestType',
  'data': [ 'sev', 'sev-snp' ] }

##
# @SevGuestInfo:
#
# Information specific to legacy SEV/SEV-ES guests.
#
# @policy: SEV policy value
#
# @handle: SEV firmware handle
#
# Since: 2.12
##
{ 'struct': 'SevGuestInfo',
  'data': { 'policy': 'uint32',
            'handle': 'uint32' } }

##
# @SevSnpGuestInfo:
#
# Information specific to SEV-SNP guests.
#
# @snp-policy: SEV-SNP policy value
#
# Since: 9.1
##
{ 'struct': 'SevSnpGuestInfo',
  'data': { 'snp-policy': 'uint64' } }

##
# @SevInfo:
#
# Information about Secure Encrypted Virtualization (SEV) support
#
# @enabled: true if SEV is active
#
# @api-major: SEV API major version
#
# @api-minor: SEV API minor version
#
# @build-id: SEV FW build id
#
# @state: SEV guest state
#
# @sev-type: Type of SEV guest being run
#
# Since: 2.12
##
{ 'union': 'SevInfo',
  'base': { 'enabled': 'bool',
            'api-major': 'uint8',
            'api-minor' : 'uint8',
            'build-id' : 'uint8',
            'state' : 'SevState',
            'sev-type' : 'SevGuestType' },
  'discriminator': 'sev-type',
  'data': {
      'sev': 'SevGuestInfo',
      'sev-snp': 'SevSnpGuestInfo' } }


##
# @query-sev:
#
# Returns information about SEV/SEV-ES/SEV-SNP.
#
# If unavailable due to an incompatible configuration the
# returned @enabled field will be set to 'false' and the
# state of all other fields is undefined.
#
# Returns: @SevInfo
#
# Since: 2.12
#
# .. qmp-example::
#
#     -> { "execute": "query-sev" }
#     <- { "return": { "enabled": true, "api-major" : 0, "api-minor" : 0,
#                      "build-id" : 0, "policy" : 0, "state" : "running",
#                      "handle" : 1 } }
##
{ 'command': 'query-sev', 'returns': 'SevInfo' }

##
# @SevLaunchMeasureInfo:
#
# SEV Guest Launch measurement information
#
# @data: the measurement value encoded in base64
#
# Since: 2.12
##
{ 'struct': 'SevLaunchMeasureInfo', 'data': {'data': 'str'} }

##
# @query-sev-launch-measure:
#
# Query the SEV/SEV-ES guest launch information.
#
# This is only valid on x86 machines configured with KVM and the
# 'sev-guest' confidential virtualization object. The launch
# measurement for SEV-SNP guests is only available within
# the guest.
#
# This will return an error if the launch measurement is
# unavailable, either due to an invalid guest configuration
# or if the guest has not reached the required SEV state.
#
# Returns: The @SevLaunchMeasureInfo for the guest
#
# Since: 2.12
#
# .. qmp-example::
#
#     -> { "execute": "query-sev-launch-measure" }
#     <- { "return": { "data": "4l8LXeNlSPUDlXPJG5966/8%YZ" } }
##
{ 'command': 'query-sev-launch-measure', 'returns': 'SevLaunchMeasureInfo' }

##
# @SevCapability:
#
# The struct describes capability for a Secure Encrypted
# Virtualization feature.
#
# @pdh: Platform Diffie-Hellman key (base64 encoded)
#
# @cert-chain: PDH certificate chain (base64 encoded)
#
# @cpu0-id: Unique ID of CPU0 (base64 encoded) (since 7.1)
#
# @cbitpos: C-bit location in page table entry
#
# @reduced-phys-bits: Number of physical Address bit reduction when
#     SEV is enabled
#
# Since: 2.12
##
{ 'struct': 'SevCapability',
  'data': { 'pdh': 'str',
            'cert-chain': 'str',
            'cpu0-id': 'str',
            'cbitpos': 'int',
            'reduced-phys-bits': 'int'} }

##
# @query-sev-capabilities:
#
# This command is used to get the SEV capabilities, and is only
# supported on AMD X86 platforms with KVM enabled. If SEV is not
# available on the platform an error will be returned.
#
# Returns: SevCapability objects.
#
# Since: 2.12
#
# .. qmp-example::
#
#     -> { "execute": "query-sev-capabilities" }
#     <- { "return": { "pdh": "8CCDD8DDD", "cert-chain": "888CCCDDDEE",
#                      "cpu0-id": "2lvmGwo+...61iEinw==",
#                      "cbitpos": 47, "reduced-phys-bits": 1}}
##
{ 'command': 'query-sev-capabilities', 'returns': 'SevCapability' }

##
# @sev-inject-launch-secret:
#
# This command injects a secret blob into memory of a SEV/SEV-ES guest.
#
# This is only valid on x86 machines configured with KVM and the
# 'sev-guest' confidential virtualization object. SEV-SNP guests
# do not support launch secret injection
#
# This will return an error if launch secret injection is not possible,
# either due to an invalid guest configuration, or if the guest has not
# reached the required SEV state.
#
# @packet-header: the launch secret packet header encoded in base64
#
# @secret: the launch secret data to be injected encoded in base64
#
# @gpa: the guest physical address where secret will be injected.
#
# Since: 6.0
##
{ 'command': 'sev-inject-launch-secret',
  'data': { 'packet-header': 'str', 'secret': 'str', '*gpa': 'uint64' } }

##
# @SevAttestationReport:
#
# The struct describes attestation report for a Secure Encrypted
# Virtualization feature.
#
# @data: guest attestation report (base64 encoded)
#
# Since: 6.1
##
{ 'struct': 'SevAttestationReport',
  'data': { 'data': 'str'} }

##
# @query-sev-attestation-report:
#
# This command is used to get the SEV attestation report.
#
# This is only valid on x86 machines configured with KVM and the
# 'sev-guest' confidential virtualization object. The attestation
# report for SEV-SNP guests is only available within the guest.
#
# This will return an error if the attestation report is
# unavailable, either due to an invalid guest configuration
# or if the guest has not reached the required SEV state.
#
# @mnonce: a random 16 bytes value encoded in base64 (it will be
#     included in report)
#
# Returns: SevAttestationReport objects.
#
# Since: 6.1
#
# .. qmp-example::
#
#     -> { "execute" : "query-sev-attestation-report",
#                      "arguments": { "mnonce": "aaaaaaa" } }
#     <- { "return" : { "data": "aaaaaaaabbbddddd"} }
##
{ 'command': 'query-sev-attestation-report',
  'data': { 'mnonce': 'str' },
  'returns': 'SevAttestationReport' }

##
# @SGXEPCSection:
#
# Information about intel SGX EPC section info
#
# @node: the numa node
#
# @size: the size of EPC section
#
# Since: 7.0
##
{ 'struct': 'SGXEPCSection',
  'data': { 'node': 'int',
            'size': 'uint64'}}

##
# @SGXInfo:
#
# Information about intel Safe Guard eXtension (SGX) support
#
# @sgx: true if SGX is supported
#
# @sgx1: true if SGX1 is supported
#
# @sgx2: true if SGX2 is supported
#
# @flc: true if FLC is supported
#
# @sections: The EPC sections info for guest (Since: 7.0)
#
# Since: 6.2
##
{ 'struct': 'SGXInfo',
  'data': { 'sgx': 'bool',
            'sgx1': 'bool',
            'sgx2': 'bool',
            'flc': 'bool',
            'sections': ['SGXEPCSection']} }

##
# @query-sgx:
#
# Returns information about SGX
#
# Returns: @SGXInfo
#
# Since: 6.2
#
# .. qmp-example::
#
#     -> { "execute": "query-sgx" }
#     <- { "return": { "sgx": true, "sgx1" : true, "sgx2" : true,
#                      "flc": true,
#                      "sections": [{"node": 0, "size": 67108864},
#                      {"node": 1, "size": 29360128}]} }
##
{ 'command': 'query-sgx', 'returns': 'SGXInfo' }

##
# @query-sgx-capabilities:
#
# Returns information from host SGX capabilities
#
# Returns: @SGXInfo
#
# Since: 6.2
#
# .. qmp-example::
#
#     -> { "execute": "query-sgx-capabilities" }
#     <- { "return": { "sgx": true, "sgx1" : true, "sgx2" : true,
#                      "flc": true,
#                      "section" : [{"node": 0, "size": 67108864},
#                      {"node": 1, "size": 29360128}]} }
##
{ 'command': 'query-sgx-capabilities', 'returns': 'SGXInfo' }
